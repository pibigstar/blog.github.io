<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>派大星的博客</title>
  
  <subtitle>很多事情不是会了才能做，而是做了才能学会</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pibigstar.com/"/>
  <updated>2019-09-30T03:12:58.980Z</updated>
  <id>http://pibigstar.com/</id>
  
  <author>
    <name>派大星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux释放内存</title>
    <link href="http://pibigstar.com/2019/09/30/Linux%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98/"/>
    <id>http://pibigstar.com/2019/09/30/Linux释放内存/</id>
    <published>2019-09-30T03:11:04.000Z</published>
    <updated>2019-09-30T03:12:58.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure><h2 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h2><p>可用内存为：free + buff/caches的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写缓存到文件系统</span></span><br><span class="line">sync</span><br><span class="line"><span class="comment"># 释放内存</span></span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看内存&quot;&gt;&lt;a href=&quot;#查看内存&quot; class=&quot;headerlink&quot; title=&quot;查看内存&quot;&gt;&lt;/a&gt;查看内存&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://pibigstar.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://pibigstar.com/tags/Linux/"/>
    
      <category term="free" scheme="http://pibigstar.com/tags/free/"/>
    
  </entry>
  
  <entry>
    <title>Centos配置优化</title>
    <link href="http://pibigstar.com/2019/09/30/Centos%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
    <id>http://pibigstar.com/2019/09/30/Centos配置优化/</id>
    <published>2019-09-30T03:11:04.000Z</published>
    <updated>2019-09-30T03:12:58.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-升级内核"><a href="#1-升级内核" class="headerlink" title="1. 升级内核"></a>1. 升级内核</h1><blockquote><p>目前默认的内核都是 3.10的，我们需要升级到4.4</p><ol><li>查看内核版本</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><ol start="2"><li><p>升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org  </span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm  </span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel<span class="_">-lt</span> -y  </span><br><span class="line">cat /boot/grub2/grub.cfg |grep menuentry  </span><br><span class="line">grub2-set-default <span class="string">'CentOS Linux (4.4.177-1.el7.elrepo.x86_64) 7 (Core)'</span>  </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li><li><p>再次查看当前内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure></li><li><p>移除无用内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y kernel*</span><br><span class="line"></span><br><span class="line">yum remove -y kernel-tools-libs  </span><br><span class="line"></span><br><span class="line">yum --enablerepo=elrepo-kernel install --skip-broken -y kernel<span class="_">-lt</span>-headers kernel<span class="_">-lt</span>-tools kernel<span class="_">-lt</span>-devel</span><br><span class="line"></span><br><span class="line">yum --enablerepo=elrepo-kernel install -y perf python-perf</span><br></pre></td></tr></table></figure></li></ol><h1 id="2-字体优化"><a href="#2-字体优化" class="headerlink" title="2. 字体优化"></a>2. 字体优化</h1><p>有时候可能中文显示会出现问题，这里我们将字体编码改为UTF-8</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/profile &lt;&lt;EOF</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=en_US.UTF-8</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/environment &lt;&lt;EOF</span><br><span class="line">LANG=en_US.utf-8</span><br><span class="line">LC_ALL=en_US.utf-8</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>刷新生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /ect/profile</span><br><span class="line"><span class="built_in">source</span> /etc/environment</span><br></pre></td></tr></table></figure><h1 id="3-进程限制优化"><a href="#3-进程限制优化" class="headerlink" title="3. 进程限制优化"></a>3. 进程限制优化</h1><ol><li><p>查看进行限制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/security/limits.d/20-nproc.conf_bk</span><br></pre></td></tr></table></figure></li><li><p>修改限制</p><blockquote><p>你可以加大限制，也可以改为 <code>unlimited</code>,让其不限制进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.d/20-nproc.conf_bk</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-时区优化"><a href="#4-时区优化" class="headerlink" title="4. 时区优化"></a>4. 时区优化</h1><ol><li><p>查看当前使用时区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl | grep <span class="string">"Time zone"</span></span><br></pre></td></tr></table></figure></li><li><p>修改时区<br>这里我们修改为上海的时区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-文件打开数优化"><a href="#5-文件打开数优化" class="headerlink" title="5. 文件打开数优化"></a>5. 文件打开数优化</h1><blockquote><p>我们可以增大或减小文件的打开数，来优化我们系统的运行效率</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/serurity/limits.conf</span><br></pre></td></tr></table></figure><h1 id="6-增加用户的操作日志记录"><a href="#6-增加用户的操作日志记录" class="headerlink" title="6. 增加用户的操作日志记录"></a>6. 增加用户的操作日志记录</h1><ol><li><p>将文件添加到<code>/etc/profile</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /etc/profile &lt;&lt;EOF</span><br><span class="line"><span class="built_in">history</span></span><br><span class="line">USER=`whoami`</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null| awk <span class="string">'&#123;print $NF&#125;'</span>|sed -e <span class="string">'s/[()]//g'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$USER_IP</span>"</span> = <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">USER_IP=`hostname`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /var/<span class="built_in">log</span>/<span class="built_in">history</span> ]; <span class="keyword">then</span></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/<span class="built_in">history</span></span><br><span class="line">chmod 777 /var/<span class="built_in">log</span>/<span class="built_in">history</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">mkdir /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line">chmod 300 /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTSIZE=4096</span><br><span class="line">DT=`date +<span class="string">"%Y%m%d_%H:%M:%S"</span>`</span><br><span class="line"><span class="built_in">export</span> HISTFILE=<span class="string">"/var/log/history/<span class="variable">$&#123;LOGNAME&#125;</span>/<span class="variable">$&#123;USER&#125;</span>@<span class="variable">$&#123;USER_IP&#125;</span>_<span class="variable">$DT</span>"</span></span><br><span class="line">chmod 600 /var/<span class="built_in">log</span>/<span class="built_in">history</span>/<span class="variable">$&#123;LOGNAME&#125;</span>/*<span class="built_in">history</span>* 2&gt;/dev/null</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>使命令生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>查看日志</p><blockquote><p>登录，登出之后在 <code>/var/log/history</code>中就可以看到以用户命名的文件夹，进入之后就会显示所有的日志操作</p></blockquote></li></ol><h1 id="7-日志优化"><a href="#7-日志优化" class="headerlink" title="7. 日志优化"></a>7. 日志优化</h1><p>压缩日志，将<code>compress</code>的注释删掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/logrotate.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-升级内核&quot;&gt;&lt;a href=&quot;#1-升级内核&quot; class=&quot;headerlink&quot; title=&quot;1. 升级内核&quot;&gt;&lt;/a&gt;1. 升级内核&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;目前默认的内核都是 3.10的，我们需要升级到4.4&lt;/p&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://pibigstar.com/categories/Linux/"/>
    
    
      <category term="centos" scheme="http://pibigstar.com/tags/centos/"/>
    
      <category term="优化" scheme="http://pibigstar.com/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="linux" scheme="http://pibigstar.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL字段操作</title>
    <link href="http://pibigstar.com/2019/09/30/MySQL%E5%AD%97%E6%AE%B5%E6%93%8D%E4%BD%9C/"/>
    <id>http://pibigstar.com/2019/09/30/MySQL字段操作/</id>
    <published>2019-09-30T03:11:04.000Z</published>
    <updated>2019-09-30T03:12:58.912Z</updated>
    
    <content type="html"><![CDATA[<p>添加列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">add</span> <span class="keyword">COLUMN</span> 列名 <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>;</span><br></pre></td></tr></table></figure><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名;</span><br></pre></td></tr></table></figure><p>更新列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 列名 新列名 <span class="built_in">varchar</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>修改列属性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 <span class="built_in">varchar</span>(<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>修改字段默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">alter</span> 字段名 <span class="keyword">set</span> <span class="keyword">default</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p>删除字段默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">alter</span> 列名 <span class="keyword">drop</span> <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;添加列&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://pibigstar.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://pibigstar.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Go语言入门（6）闭包</title>
    <link href="http://pibigstar.com/2019/09/24/Go%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%EF%BC%886%EF%BC%89%E9%97%AD%E5%8C%85/"/>
    <id>http://pibigstar.com/2019/09/24/Go语言入门（6）闭包/</id>
    <published>2019-09-24T06:02:04.000Z</published>
    <updated>2019-09-30T03:12:58.836Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://blog.csdn.net/zhangzhebjut/article/details/25181151" target="_blank" rel="noopener">https://blog.csdn.net/zhangzhebjut/article/details/25181151</a> </p><h1 id="一-函数式编程概论"><a href="#一-函数式编程概论" class="headerlink" title="一 函数式编程概论"></a>一 函数式编程概论</h1><p>在过去近十年时间里，面向对象编程大行其道，以至于在大学的教育里，老师也只会教给我们两种编程模型，面向过程和面向对象。孰不知，在面向对象思想产生之前，函数式编程已经有了数十年的历史。就让我们回顾这个古老又现代的编程模型，看看究竟是什么魔力将这个概念在21世纪的今天再次拉入我们的视野。</p><p>随着硬件性能的提升以及编译技术和虚拟机技术的改进，一些曾被性能问题所限制的动态语言开始受到关注，Python、Ruby 和 Lua 等语言都开始在应用中崭露头角。动态语言因其方便快捷的开发方式成为很多人喜爱的编程语言，伴随动态语言的流行，函数式编程也再次进入了我们的视野。</p><p>究竟什么是函数式编程呢？</p><p>在维基百科中，对函数式编程有很详细的介绍。Wiki上对Functional Programming的定义：</p><blockquote><p>In computer science, functional programming is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids state and mutable data.</p></blockquote><p>简单地翻译一下，也就是说函数式编程是一种编程模型，他将计算机运算看做是数学中函数的计算，并且避免了状态以及变量的概念。</p><h1 id="二-闭包"><a href="#二-闭包" class="headerlink" title="二 闭包"></a>二 闭包</h1><p>在函数编程中经常用到闭包，闭包是什么？它是怎么产生的及用来解决什么问题呢?先给出闭包的字面定义：闭包是由函数及其相关引用环境组合而成的实体(即：闭包=函数+引用环境)。这个从字面上很难理解，特别对于一直使用命令式语言进行编程的程序员们。</p><p><strong>闭包只是在形式和表现上像函数，但实际上不是函数</strong>。函数是一些可执行的代码，这些代码在函数被定义后就确定了，不会在执行时发生变化，所以一个函数只有一个实例。闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生<strong>不同的实例</strong>。所谓引用环境是指在程序执行中的某个点所有处于活跃状态的约束所组成的集合。其中的约束是指一个变量的名字和其所代表的对象之间的联系。那么为什么要把引用环境与函数组合起来呢？这主要是因为在支持嵌套作用域的语言中，有时不能简单直接地确定函数的引用环境。这样的语言一般具有这样的特性：</p><blockquote><p>函数是一等公民（First-class value），即函数可以作为另一个函数的返回值或参数，还可以作为一个变量的值。<br>函数可以嵌套定义，即在一个函数内部可以定义另一个函数。</p></blockquote><p>在面向对象编程中，我们把对象传来传去，那在函数式编程中，要做的是把函数传来传去，说成术语，把他叫做高阶函数。在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数:</p><ol><li>接受一个或多个函数作为输入</li><li>输出一个函数</li></ol><p>在函数式编程中，函数是基本单位，是第一型，他几乎被用作一切，包括最简单的计算，甚至连变量都被计算所取代。</p><h2 id="闭包小结"><a href="#闭包小结" class="headerlink" title="闭包小结:"></a>闭包小结:</h2><p>函数只是一段可执行代码，编译后就“固化”了，每个函数在内存中只有一份实例，得到函数的入口点便可以执行函数了。在函数式编程语言中，函数是一等公民（First class value）：第一类对象，我们不需要像命令式语言中那样借助函数指针，委托操作函数，函数可以作为另一个函数的参数或返回值，可以赋给一个变量。函数可以嵌套定义，即在一个函数内部可以定义另一个函数，有了嵌套函数这种结构，便会产生闭包问题。如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    innerfunc := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        sum += x</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerfunc</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    pos, neg := adder(), adder()</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Println(pos(i), neg(<span class="number">-2</span>*i))</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段程序中，函数innerfunc是函数adder的内嵌函数，并且是adder函数的返回值。我们注意到一个问题：内嵌函数innerfunc中引用到外层函数中的局部变量sum，Go会这么处理这个问题呢？先让我们来看看这段代码的运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0 0  </span><br><span class="line">1 -2  </span><br><span class="line">3 -6  </span><br><span class="line">6 -12   </span><br><span class="line">10 -20  </span><br><span class="line">15 -30  </span><br><span class="line">21 -42  </span><br><span class="line">28 -56  </span><br><span class="line">36 -72  </span><br><span class="line">45 -90</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> Go不能在函数内部显式嵌套定义函数，但是可以定义一个匿名函数。如上面所示，我们定义了一个匿名函数对象，然后将其赋值给innerfunc，最后将其作为返回值返回。</p><p>当用不同的参数调用adder函数得到（pos(i)，neg(i)）函数时，得到的结果是隔离的，也就是说每次调用adder返回的函数都将生成并保存一个新的局部变量sum。其实这里adder函数返回的就是闭包。<br>这个就是Go中的闭包，一个函数和与其相关的引用环境组合而成的实体。一句关于闭包的名言: 对象是附有行为的数据，而闭包是附有数据的行为。</p><h1 id="三-闭包使用"><a href="#三-闭包使用" class="headerlink" title="三 闭包使用"></a>三 闭包使用</h1><p>闭包经常用于回调函数，当IO操作（例如从网络获取数据、文件读写)完成的时候，会对获取的数据进行某些操作，这些操作可以交给函数对象处理。</p><p>除此之外，在一些公共的操作中经常会包含一些差异性的特殊操作，而这些差异性的操作可以用函数来进行封装。看下面的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> Traveser <span class="function"><span class="keyword">func</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"><span class="function">/*</span></span><br><span class="line"><span class="function">    <span class="title">Process</span>:封装公共切片数组操作</span></span><br><span class="line"><span class="function">*/</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Process</span><span class="params">(array <span class="keyword">interface</span>&#123;&#125;, traveser Traveser)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> array == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">"nil pointer"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> length <span class="keyword">int</span> <span class="comment">//数组的长度</span></span><br><span class="line">    <span class="keyword">switch</span> array.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> []<span class="keyword">int</span>:</span><br><span class="line">        length = <span class="built_in">len</span>(array.([]<span class="keyword">int</span>))</span><br><span class="line">    <span class="keyword">case</span> []<span class="keyword">string</span>:</span><br><span class="line">        length = <span class="built_in">len</span>(array.([]<span class="keyword">string</span>))</span><br><span class="line">    <span class="keyword">case</span> []<span class="keyword">float32</span>:</span><br><span class="line">        length = <span class="built_in">len</span>(array.([]<span class="keyword">float32</span>))</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">"error type"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">"len is zero."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    traveser(array)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    具体操作:升序排序数组元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SortByAscending</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    intSlice, ok := ele.([]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    length := <span class="built_in">len</span>(intSlice)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        isChange := <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; length<span class="number">-1</span>-i; j++ &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> intSlice[j] &gt; intSlice[j+<span class="number">1</span>] &#123;</span><br><span class="line">                isChange = <span class="literal">true</span></span><br><span class="line">                intSlice[j], intSlice[j+<span class="number">1</span>] = intSlice[j+<span class="number">1</span>], intSlice[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> isChange == <span class="literal">false</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    具体操作:降序排序数组元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SortByDescending</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">    intSlice, ok := ele.([]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    length := <span class="built_in">len</span>(intSlice)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        isChange := <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; length<span class="number">-1</span>-i; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> intSlice[j] &lt; intSlice[j+<span class="number">1</span>] &#123;</span><br><span class="line">                isChange = <span class="literal">true</span></span><br><span class="line">                intSlice[j], intSlice[j+<span class="number">1</span>] = intSlice[j+<span class="number">1</span>], intSlice[j]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> isChange == <span class="literal">false</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">    intSlice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    intSlice = <span class="built_in">append</span>(intSlice, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">    Process(intSlice, SortByDescending)</span><br><span class="line">    fmt.Println(intSlice) <span class="comment">//[4 3 2 1]</span></span><br><span class="line">    Process(intSlice, SortByAscending)</span><br><span class="line">    fmt.Println(intSlice) <span class="comment">//[1 2 3 4]</span></span><br><span class="line"> </span><br><span class="line">    stringSlice := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">    stringSlice = <span class="built_in">append</span>(stringSlice, <span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"china"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       具体操作:使用匿名函数封装输出操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Process(stringSlice, <span class="function"><span class="keyword">func</span><span class="params">(elem <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> slice, ok := elem.([]<span class="keyword">string</span>); ok &#123;</span><br><span class="line">            <span class="keyword">for</span> index, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">                fmt.Println(<span class="string">"index:"</span>, index, <span class="string">"  value:"</span>, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    floatSlice := <span class="built_in">make</span>([]<span class="keyword">float32</span>, <span class="number">0</span>)</span><br><span class="line">    floatSlice = <span class="built_in">append</span>(floatSlice, <span class="number">1.2</span>, <span class="number">3.4</span>, <span class="number">2.4</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       具体操作:使用匿名函数封装自定义操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Process(floatSlice, <span class="function"><span class="keyword">func</span><span class="params">(elem <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> slice, ok := elem.([]<span class="keyword">float32</span>); ok &#123;</span><br><span class="line">            <span class="keyword">for</span> index, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">                slice[index] = value * <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(floatSlice) <span class="comment">//[2.4 6.8 4.8]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[4 3 2 1]   </span><br><span class="line">[1 2 3 4]</span><br><span class="line">index: 0   value: hello</span><br><span class="line">index: 1   value: world</span><br><span class="line">index: 2   value: china</span><br><span class="line">[2.4 6.8 4.8]</span><br></pre></td></tr></table></figure><p>在上面的例子中，Process函数负责对切片(数组）数据进行操作，在操作切片(数组)时候，首先要做一些参数检测，例如指针是否为空、数组长度是否大于0等。这些是操作数据的公共操作。具体针对数据可以有自己特殊的操作，包括排序(升序、降序）、输出等。针对这些特殊的操作可以使用函数对象来进行封装。<br>再看下面的例子，这个例子没什么实际意义，只是为了说明闭包的使用方式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> FilterFunc <span class="function"><span class="keyword">func</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  公共操作:对数据进行特殊操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Data</span><span class="params">(arr <span class="keyword">interface</span>&#123;&#125;, filterFunc FilterFunc)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"> </span><br><span class="line">    slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    array, _ := arr.([]<span class="keyword">int</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> array &#123;</span><br><span class="line"> </span><br><span class="line">        integer, ok := filterFunc(value).(<span class="keyword">int</span>)</span><br><span class="line">        <span class="keyword">if</span> ok &#123;</span><br><span class="line">            slice = <span class="built_in">append</span>(slice, integer)</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slice</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  具体操作:奇数变偶数（这里可以不使用接口类型,直接使用int类型)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EvenFilter</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"> </span><br><span class="line">    integer, ok := ele.(<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        <span class="keyword">if</span> integer%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">            integer = integer + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> integer</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  具体操作:偶数变奇数（这里可以不使用接口类型,直接使用int类型)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OddFilter</span><span class="params">(ele <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"> </span><br><span class="line">    integer, ok := ele.(<span class="keyword">int</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        <span class="keyword">if</span> integer%<span class="number">2</span> != <span class="number">1</span> &#123;</span><br><span class="line">            integer = integer + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> integer</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sliceEven := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    sliceEven = <span class="built_in">append</span>(sliceEven, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    sliceEven = Data(sliceEven, EvenFilter).([]<span class="keyword">int</span>)</span><br><span class="line">    fmt.Println(sliceEven) <span class="comment">//[2 2 4 4 6]</span></span><br><span class="line"> </span><br><span class="line">    sliceOdd := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    sliceOdd = <span class="built_in">append</span>(sliceOdd, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    sliceOdd = Data(sliceOdd, OddFilter).([]<span class="keyword">int</span>)</span><br><span class="line">    fmt.Println(sliceOdd) <span class="comment">//[1 3 3 5 5]</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2 2 4 4 6]  </span><br><span class="line">[1 3 3 5 5]</span><br></pre></td></tr></table></figure><p>Data作为公共函数，然后分别定义了两个具体的特殊函数:偶数和奇数的过滤器，定义具体的操作。</p><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四 总结"></a>四 总结</h1><p>上面例子中闭包的使用有点类似于面向对象设计模式中的<strong>模版模式</strong>，在模版模式中是在父类中定义公共的行为执行序列，然后子类通过重载父类的方法来实现特定的操作，而在Go语言中我们使用闭包实现了同样的效果。</p><p>其实理解闭包最方便的方法就是将<strong>闭包函数看成一个类 ,一个闭包函数调用就是实例化一个类</strong>（在Objective-c中闭包就是用类来实现的），然后就可以从类的角度看出哪些是<strong>全局变量</strong>，哪些是<strong>局部变量</strong>。例如在第一个例子中，<code>pos</code>和<code>neg</code>分别实例化了两个<code>闭包类</code>，在这个<code>闭包类</code>中有个闭包全局变量<code>sum</code>。所以这样就很好理解返回的结果了。</p><p>参考:<br><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-closure/index.html" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/linux/l-cn-closure/index.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载自：&lt;a href=&quot;https://blog.csdn.net/zhangzhebjut/article/details/25181151&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zhangzhebj
      
    
    </summary>
    
    
      <category term="go" scheme="http://pibigstar.com/categories/go/"/>
    
    
      <category term="go" scheme="http://pibigstar.com/tags/go/"/>
    
      <category term="闭包" scheme="http://pibigstar.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>QQ快速登录协议分析</title>
    <link href="http://pibigstar.com/2019/09/22/QQ%E5%BF%AB%E9%80%9F%E7%99%BB%E5%BD%95%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90/"/>
    <id>http://pibigstar.com/2019/09/22/QQ快速登录协议分析/</id>
    <published>2019-09-22T07:03:04.000Z</published>
    <updated>2019-09-30T03:12:59.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-获取pt-local-token"><a href="#1-获取pt-local-token" class="headerlink" title="1.获取pt_local_token"></a>1.获取pt_local_token</h1><p>请求</p><blockquote><p><a href="https://xui.ptlogin2.qq.com/cgi-bin/xlogin?s_url=https%3A%2F%2Fhuifu.qq.com%2Findex.html&amp;style=20&amp;appid=715021417&amp;proxy_url=https%3A%2F%2Fhuifu.qq.com%2Fproxy.html" target="_blank" rel="noopener">https://xui.ptlogin2.qq.com/cgi-bin/xlogin?s_url=https%3A%2F%2Fhuifu.qq.com%2Findex.html&amp;style=20&amp;appid=715021417&amp;proxy_url=https%3A%2F%2Fhuifu.qq.com%2Fproxy.html</a></p></blockquote><p>在header的Set-Cookie中记录着该值</p><h1 id="2-获取本机所登陆的QQ号码"><a href="#2-获取本机所登陆的QQ号码" class="headerlink" title="2. 获取本机所登陆的QQ号码"></a>2. 获取本机所登陆的QQ号码</h1><p>请求</p><blockquote><p><a href="https://localhost.ptlogin2.qq.com:4301/pt_get_uins?callback=ptui_getuins_CB&amp;r=0.6694805047494219&amp;pt_local_tk=`pt_local_tk`" target="_blank" rel="noopener">https://localhost.ptlogin2.qq.com:4301/pt_get_uins?callback=ptui_getuins_CB&amp;r=0.6694805047494219&amp;pt_local_tk=`pt_local_tk`</a></p></blockquote><p><strong>请求头带入Referer，Cookie带入pt_local_token=第一步得到的值</strong><br>端口是从4000~4008之间的，不确定哪一个</p><p>referer：</p><blockquote><p><a href="https://xui.ptlogin2.qq.com/cgi-bin/xlogin?proxy_url=https%3A//qzs.qq.com/qzone/v6/portal/proxy.html&amp;daid=5&amp;&amp;hide_title_bar=1&amp;low_login=0&amp;qlogin_auto_login=1&amp;no_verifyimg=1&amp;link_target=blank&amp;appid=549000912&amp;style=22&amp;target=self&amp;s_url=https%3A%2F%2Fqzs.qzone.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone&amp;pt_qr_app=%E6%89%8B%E6%9C%BAQQ%E7%A9%BA%E9%97%B4&amp;pt_qr_link=http%3A//z.qzone.com/download.html&amp;self_regurl=https%3A//qzs.qq.com/qzone/v6/reg/index.html&amp;pt_qr_help_link=http%3A//z.qzone.com/download.html&amp;pt_no_auth=1" target="_blank" rel="noopener">https://xui.ptlogin2.qq.com/cgi-bin/xlogin?proxy_url=https%3A//qzs.qq.com/qzone/v6/portal/proxy.html&amp;daid=5&amp;&amp;hide_title_bar=1&amp;low_login=0&amp;qlogin_auto_login=1&amp;no_verifyimg=1&amp;link_target=blank&amp;appid=549000912&amp;style=22&amp;target=self&amp;s_url=https%3A%2F%2Fqzs.qzone.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone&amp;pt_qr_app=%E6%89%8B%E6%9C%BAQQ%E7%A9%BA%E9%97%B4&amp;pt_qr_link=http%3A//z.qzone.com/download.html&amp;self_regurl=https%3A//qzs.qq.com/qzone/v6/reg/index.html&amp;pt_qr_help_link=http%3A//z.qzone.com/download.html&amp;pt_no_auth=1</a></p></blockquote><p>返回数据</p><blockquote><p>var var_sso_uin_list=<br>[{“account”:”Q号”,”client_type”:65793,”face_index”:144,”gender”:1,”nickname”:”Blue”,”uin”:”QQ号”,”uin_flag”:4194822}];ptui_getuins_CB(var_sso_uin_list);</p></blockquote><h1 id="3-获取clientkey"><a href="#3-获取clientkey" class="headerlink" title="3. 获取clientkey"></a>3. 获取clientkey</h1><p>请求：</p><blockquote><p><a href="https://localhost.ptlogin2.qq.com:4301/pt_get_st?clientuin=`QQ号`&amp;callback=ptui_getst_CB&amp;r=0.7284667321181328&amp;pt_local_tk=-1806654417" target="_blank" rel="noopener">https://localhost.ptlogin2.qq.com:4301/pt_get_st?clientuin=`QQ号`&amp;callback=ptui_getst_CB&amp;r=0.7284667321181328&amp;pt_local_tk=-1806654417</a></p></blockquote><p><strong>请求头带入Referer，Cookie带入pt_local_token=第一步得到的值</strong></p><p>clientkey还是在response中的header的Set-Cookie中</p><h1 id="4-获取skey-uin"><a href="#4-获取skey-uin" class="headerlink" title="4. 获取skey,uin"></a>4. 获取skey,uin</h1><p>请求</p><blockquote><p><a href="https://ssl.ptlogin2.qq.com/jump?clientuin=`clientuin`&amp;keyindex=9&amp;pt_aid=715021417&amp;u1=https%3A%2F%2Fhuifu.qq.com%2Findex.html&amp;pt_local_tk=`pt_local_tk`&amp;pt_3rd_aid=0&amp;ptopt=1&amp;style=40" target="_blank" rel="noopener">https://ssl.ptlogin2.qq.com/jump?clientuin=`clientuin`&amp;keyindex=9&amp;pt_aid=715021417&amp;u1=https%3A%2F%2Fhuifu.qq.com%2Findex.html&amp;pt_local_tk=`pt_local_tk`&amp;pt_3rd_aid=0&amp;ptopt=1&amp;style=40</a></p></blockquote><p>请求头带入referer和cookie。<br>cookie需要带入<code>pt_local_token</code>、<code>clientuin</code>、<code>clientkey</code>等关键参数。</p><p>skey，uin还是在response中的header的Set-Cookie中</p><p>另外此请求返回数据中有一个URL，其实用这个URL就可以直接登录对方的QQ空间了。<br>URL 大概下面这样子</p><blockquote><p>ptui_qlogin_CB(‘0’, ‘<a href="https://ptlogin2.qzone.qq.com/check_sig?pttype=2&amp;uin=QQ号&amp;service=jump&amp;nodirect=0&amp;ptsigx=06bbcd374ab3c5df7d26d1493f9a6364895db2999b5cb25a3fcf208213a7211c3848716312355f3cb98c44626c6f3fda428d7e4e09f196e1ace0c26f3acd7620&amp;s_url=https%3A%2F%2Fqzs.qzone.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone%26specifyurl%3Dhttp%253A%252F%252Fuser.qzone.qq.com%252FQ号&amp;f_url=&amp;ptlang=2052&amp;ptredirect=100&amp;aid=1000101&amp;daid=5&amp;j_later=0&amp;low_login_hour=0&#174;master=0&amp;pt_login_type=2&amp;pt_aid=549000912&amp;pt_aaid=0&amp;pt_light=0&amp;pt_3rd_aid=0&#39;" target="_blank" rel="noopener">https://ptlogin2.qzone.qq.com/check_sig?pttype=2&amp;uin=QQ号&amp;service=jump&amp;nodirect=0&amp;ptsigx=06bbcd374ab3c5df7d26d1493f9a6364895db2999b5cb25a3fcf208213a7211c3848716312355f3cb98c44626c6f3fda428d7e4e09f196e1ace0c26f3acd7620&amp;s_url=https%3A%2F%2Fqzs.qzone.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone%26specifyurl%3Dhttp%253A%252F%252Fuser.qzone.qq.com%252FQ号&amp;f_url=&amp;ptlang=2052&amp;ptredirect=100&amp;aid=1000101&amp;daid=5&amp;j_later=0&amp;low_login_hour=0&#174;master=0&amp;pt_login_type=2&amp;pt_aid=549000912&amp;pt_aaid=0&amp;pt_light=0&amp;pt_3rd_aid=0&#39;</a>, ‘’)</p></blockquote><h1 id="5-获取p-skey"><a href="#5-获取p-skey" class="headerlink" title="5. 获取p_skey"></a>5. 获取p_skey</h1><p>请求</p><blockquote><p><a href="https://ssl.ptlogin2.qq.com/jump?clientuin=`clientuin`&amp;keyindex=9&amp;pt_aid=549000912&amp;daid=5&amp;u1=https%3A%2F%2Fqzs.qzone.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone&amp;pt_local_tk=1543159096&amp;pt_3rd_aid=0&amp;ptopt=1&amp;style=40&amp;has_onekey=1" target="_blank" rel="noopener">https://ssl.ptlogin2.qq.com/jump?clientuin=`clientuin`&amp;keyindex=9&amp;pt_aid=549000912&amp;daid=5&amp;u1=https%3A%2F%2Fqzs.qzone.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone&amp;pt_local_tk=1543159096&amp;pt_3rd_aid=0&amp;ptopt=1&amp;style=40&amp;has_onekey=1</a></p></blockquote><p>请求头带入referer和cookie。<br>cookie需要带入<code>pt_local_token</code></p><p>特别注意：p_skey是在response的Request的Response的Header中</p><h2 id="为防止别人恶意传播，此处就不贴代码了。"><a href="#为防止别人恶意传播，此处就不贴代码了。" class="headerlink" title="为防止别人恶意传播，此处就不贴代码了。"></a>为防止别人恶意传播，此处就不贴代码了。</h2><p>我把源码放我公众号上了，喜欢研究的朋友可以去取一下，回复： <code>QQ快速登录</code> 即可获取<br><img src="https://img-blog.csdnimg.cn/20190317145730122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p><p>再放几个常用的接口：</p><h3 id="1-获取QQ全部好友与分组"><a href="#1-获取QQ全部好友与分组" class="headerlink" title="1. 获取QQ全部好友与分组"></a>1. 获取QQ全部好友与分组</h3><p>接口：<a href="https://qun.qq.com/cgi-bin/qun_mgr/get_friend_list" target="_blank" rel="noopener">https://qun.qq.com/cgi-bin/qun_mgr/get_friend_list</a><br>POST请求<br>Header中加入cookie，cookie中带入这三个值：<code>uin=</code>; <code>skey=</code>;<code>p_skey=</code><br>Body中带入：bkn=g_tk<br>g_tk是通过skey经过算法计算出来了，源码中有这个算法<br><img src="https://img-blog.csdnimg.cn/2019031715014094.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20190317150201965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p><h3 id="2-QQ群列表"><a href="#2-QQ群列表" class="headerlink" title="2. QQ群列表"></a>2. QQ群列表</h3><p>接口：<a href="https://qun.qq.com/cgi-bin/qun_mgr/get_group_list" target="_blank" rel="noopener">https://qun.qq.com/cgi-bin/qun_mgr/get_group_list</a><br>POST请求<br>Header中加入cookie，cookie中带入这三个值：<code>uin=</code>; <code>skey=</code>;<code>p_skey=</code><br>Body中带入：bkn=g_tk</p><h3 id="3-获取某个群的群成员"><a href="#3-获取某个群的群成员" class="headerlink" title="3. 获取某个群的群成员"></a>3. 获取某个群的群成员</h3><p>接口：<a href="https://qun.qq.com/cgi-bin/qun_mgr/search_group_members" target="_blank" rel="noopener">https://qun.qq.com/cgi-bin/qun_mgr/search_group_members</a><br>POST请求</p><p><strong>Header</strong>中加入cookie，cookie中带入这三个值：<code>uin=</code>; <code>skey=</code>;<code>p_skey=</code><br>POST参数：<code>bkn=</code>;<code>gc=群号</code>;<code>sort=0</code>;<code>st=起始位置</code>;<code>end=结束位置</code><br>其中end为要获取多少个，st为获取成员的起始位置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-获取pt-local-token&quot;&gt;&lt;a href=&quot;#1-获取pt-local-token&quot; class=&quot;headerlink&quot; title=&quot;1.获取pt_local_token&quot;&gt;&lt;/a&gt;1.获取pt_local_token&lt;/h1&gt;&lt;p&gt;请求&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="爬虫相关,渗透" scheme="http://pibigstar.com/categories/%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3-%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="qq" scheme="http://pibigstar.com/tags/qq/"/>
    
      <category term="QQ快速登录" scheme="http://pibigstar.com/tags/QQ%E5%BF%AB%E9%80%9F%E7%99%BB%E5%BD%95/"/>
    
      <category term="pskey" scheme="http://pibigstar.com/tags/pskey/"/>
    
      <category term="skey" scheme="http://pibigstar.com/tags/skey/"/>
    
      <category term="g_tk" scheme="http://pibigstar.com/tags/g-tk/"/>
    
  </entry>
  
  <entry>
    <title>修改Java字节码</title>
    <link href="http://pibigstar.com/2019/09/22/%E4%BF%AE%E6%94%B9Java%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <id>http://pibigstar.com/2019/09/22/修改Java字节码/</id>
    <published>2019-09-22T07:03:04.000Z</published>
    <updated>2019-09-30T03:12:59.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载工具asmtools"><a href="#下载工具asmtools" class="headerlink" title="下载工具asmtools"></a>下载工具asmtools</h2><p>下载链接：<a href="https://pan.baidu.com/s/1iNHJKK9Ndsag_gqi2PYAkQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1iNHJKK9Ndsag_gqi2PYAkQ</a><br>提取码：72ke </p><h2 id="操作字节"><a href="#操作字节" class="headerlink" title="操作字节"></a>操作字节</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  System.out.println(<span class="string">"Hello, Java!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (flag == <span class="keyword">true</span>) &#123;</span><br><span class="line">  System.out.println(<span class="string">"Hello, JVM!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们编译后直接运行会打印出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, Java!</span><br><span class="line">Hello, JVM!</span><br></pre></td></tr></table></figure><p>我们知道，boolean类型在虚拟机是以int方式进行存储的，0是false，1是true，可当我们通过修改字节码的方式，让<code>flag</code>等于2 会发生什么，跟着我下面的步骤一起来看看吧</p><ol><li><p>先编译Foo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Foo.java</span><br></pre></td></tr></table></figure></li><li><p>通过字节码工具反编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar asmtools.jar jdis Foo.class &gt; Foo.jasm.1</span><br></pre></td></tr></table></figure></li><li><p>修改flag的字节码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'NR==1, /iconst_1/&#123;sub(/iconst_1/,"iconst_2")&#125; 1'</span> Foo.jasm.1 &gt; Foo.jasm</span><br></pre></td></tr></table></figure></li><li><p>将jasm反编译的再次编译为class文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar asmtools.jar jasm Foo.jasm</span><br></pre></td></tr></table></figure></li><li><p>运行Foo.class</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Foo</span><br></pre></td></tr></table></figure></li></ol><p>我们会发现只打印出了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Java!</span><br></pre></td></tr></table></figure><p>我们发现 第二个if不成立了，第一个还是成立，这是因为当我们直接进行 if(flag) 是按java虚拟机的翻译就是 当flag不等于0时则成立 而 if(flag==true) 则被虚拟机认为 当flag等于1是才成立，而我们将flag改为了2，这时第一个还是不等于0，所以成立，而第一个判断语句而不等于1了所以条件不成立。</p><p>PS: 当我们把flag改为3呢，第二个条件会成立吗？<br>答案是：会成立，很有意思是吧，这是因为java虚拟机在内部是截取的最低位来判断的，2转换为2进制为 <code>0010</code> 截取最低位就是 0，而 3 转为 二进制为<code>0001</code>，最低位为1 </p><p>另外，<code>awk</code>命令详细文档：<a href="https://blog.csdn.net/jiaobuchong/article/details/83037467" target="_blank" rel="noopener">https://blog.csdn.net/jiaobuchong/article/details/83037467</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载工具asmtools&quot;&gt;&lt;a href=&quot;#下载工具asmtools&quot; class=&quot;headerlink&quot; title=&quot;下载工具asmtools&quot;&gt;&lt;/a&gt;下载工具asmtools&lt;/h2&gt;&lt;p&gt;下载链接：&lt;a href=&quot;https://pan.baid
      
    
    </summary>
    
    
      <category term="Java,JVM" scheme="http://pibigstar.com/categories/Java-JVM/"/>
    
    
      <category term="java" scheme="http://pibigstar.com/tags/java/"/>
    
      <category term="jvm" scheme="http://pibigstar.com/tags/jvm/"/>
    
      <category term="asmtools" scheme="http://pibigstar.com/tags/asmtools/"/>
    
  </entry>
  
  <entry>
    <title>docker安装使用ELK</title>
    <link href="http://pibigstar.com/2019/09/20/docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8ELK/"/>
    <id>http://pibigstar.com/2019/09/20/docker安装使用ELK/</id>
    <published>2019-09-20T09:05:04.000Z</published>
    <updated>2019-09-30T03:12:58.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1. 安装docker"></a>1. 安装docker</h1><blockquote><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费），EE 即企业版，强调安全，付费使用，这里我们使用的CE版</p></blockquote><p>为了确保系统的稳定性，建议先update一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><p>安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>添加docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>如果官方源下载速度太慢，建议使用国内源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>建立一个docker组，并将当前用户加入到此组中，这样不用root用户即可访问到 Docker 引擎的 Unix socket</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建docker组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"><span class="comment"># 将当前用户加入到组中</span></span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>如果上面安装失败，我们可以卸载docker，重新安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">  docker-client \</span><br><span class="line">  docker-client-latest \</span><br><span class="line">  docker-common \</span><br><span class="line">  docker-latest \</span><br><span class="line">  docker-latest-logrotate \</span><br><span class="line">  docker-logrotate \</span><br><span class="line">  docker-selinux \</span><br><span class="line">  docker-engine-selinux \</span><br><span class="line">  docker-engine</span><br></pre></td></tr></table></figure><h1 id="2-安装docker-compose"><a href="#2-安装docker-compose" class="headerlink" title="2. 安装docker-compose"></a>2. 安装docker-compose</h1><blockquote><p>docker-compose是一个docker编排工具，它可以有效的解决我们镜像之间的依赖关系</p></blockquote><p>这里提供两种方式安装：</p><h4 id="直接下载"><a href="#直接下载" class="headerlink" title="直接下载"></a>直接下载</h4><ol><li><p>下载docker-compose文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>赋予文件可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure></li></ol><h4 id="pip方式安装"><a href="#pip方式安装" class="headerlink" title="pip方式安装"></a>pip方式安装</h4><ol><li><p>安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">yum -y install epel-release</span><br><span class="line"><span class="comment">#安装pip</span></span><br><span class="line">yum -y install python-pip</span><br><span class="line"><span class="comment">#更新pip</span></span><br><span class="line">pip install --upgrade pip</span><br><span class="line"><span class="comment"># 验证pip</span></span><br><span class="line">pip --version</span><br></pre></td></tr></table></figure></li><li><p>安装docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U docker-compose==1.23.2</span><br></pre></td></tr></table></figure></li><li><p>验证安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-安装ELKC"><a href="#3-安装ELKC" class="headerlink" title="3. 安装ELKC"></a>3. 安装ELKC</h1><blockquote><p>ELKC为 elasticsearch（搜索型数据库）、logstash（日志搜集、过滤、分析）、kibana（提供Web页面分析日志）、cerebro（监控elasticsearch状态）</p></blockquote><p>docker-compose.yml 文件如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="comment"># elasticsearch节点1</span></span><br><span class="line"><span class="attr">  elasticsearch:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">es7_01</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=pibigstar</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=es7_01</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">discovery.seed_hosts=es7_01</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.initial_master_nodes=es7_01,es7_02</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - es7data1:</span><span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">es7net</span></span><br><span class="line"> <span class="comment"># elasticsearch节点2</span></span><br><span class="line"><span class="attr">  elasticsearch2:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.1.0</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">es7_02</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.name=pibigstar</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">node.name=es7_02</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">discovery.seed_hosts=es7_01</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">cluster.initial_master_nodes=es7_01,es7_02</span></span><br><span class="line"><span class="attr">    ulimits:</span></span><br><span class="line"><span class="attr">      memlock:</span></span><br><span class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - es7data2:</span><span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">es7net</span></span><br><span class="line"><span class="comment"># kibana</span></span><br><span class="line"><span class="attr">  kibana:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.1.0</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">kibana7</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">I18N_LOCALE=zh-CN</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">XPACK_GRAPH_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">TIMELION_ENABLED=true</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">XPACK_MONITORING_COLLECTION_ENABLED="true"</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5601:5601"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">es7net</span></span><br><span class="line"><span class="comment"># cerebro   </span></span><br><span class="line"><span class="attr">  cerebro:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">lmenezes/cerebro:0.8.3</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">cerebro</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"9000:9000"</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="bullet">-Dhosts.0.host=http://elasticsearch:9200</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">es7net</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  es7data1:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  es7data2:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  es7net:</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> </p><p>1、如果你看到这个提示：<br><strong>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least”</strong><br>那说明你设置的 max_map_count 小了，编辑<code>/etc/sysctl.conf</code>，追加以下内容：<code>vm.max_map_count=262144</code>保存后，执行：<code>sysctl -p</code>重新启动。</p><p>2、如果启动过程中出现问题，关闭后再次启动前要先清除下数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止容器并且移除数据</span></span><br><span class="line">docker-compose down -v</span><br><span class="line"><span class="comment"># 再次启动</span></span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><ul><li>kibnan页面：<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a></li><li>cretebro页面：<a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a></li></ul><h1 id="4-启动Logstash"><a href="#4-启动Logstash" class="headerlink" title="4. 启动Logstash"></a>4. 启动Logstash</h1><ol><li><p>下载测试数据<br><a href="http://files.grouplens.org/datasets/movielens/ml-latest-small.zip" target="_blank" rel="noopener">http://files.grouplens.org/datasets/movielens/ml-latest-small.zip</a></p></li><li><p>下载Logstash</p></li></ol><p><a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a></p><ol start="3"><li><p>配置logstash.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [&quot;F:/elasticsearch/ml-latest-small/movies.csv&quot;]</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    sincedb_path =&gt; &quot;nul&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  csv &#123;</span><br><span class="line">    separator =&gt; &quot;,&quot;</span><br><span class="line">    columns =&gt; [&quot;id&quot;,&quot;content&quot;,&quot;genre&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    split =&gt; &#123; &quot;genre&quot; =&gt; &quot;|&quot; &#125;</span><br><span class="line">    remove_field =&gt; [&quot;path&quot;, &quot;host&quot;,&quot;@timestamp&quot;,&quot;message&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line"></span><br><span class="line">    split =&gt; [&quot;content&quot;, &quot;(&quot;]</span><br><span class="line">    add_field =&gt; &#123; &quot;title&quot; =&gt; &quot;%&#123;[content][0]&#125;&quot;&#125;</span><br><span class="line">    add_field =&gt; &#123; &quot;year&quot; =&gt; &quot;%&#123;[content][1]&#125;&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  mutate &#123;</span><br><span class="line">    convert =&gt; &#123;</span><br><span class="line">      &quot;year&quot; =&gt; &quot;integer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    strip =&gt; [&quot;title&quot;]</span><br><span class="line">    remove_field =&gt; [&quot;path&quot;, &quot;host&quot;,&quot;@timestamp&quot;,&quot;message&quot;,&quot;content&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">   elasticsearch &#123;</span><br><span class="line">     hosts =&gt; &quot;http://localhost:9200&quot;</span><br><span class="line">     index =&gt; &quot;movies&quot;</span><br><span class="line">     document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  stdout &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动logstash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">logstash -f F:\elasticsearch\conf\logstash.cnf</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-安装docker&quot;&gt;&lt;a href=&quot;#1-安装docker&quot; class=&quot;headerlink&quot; title=&quot;1. 安装docker&quot;&gt;&lt;/a&gt;1. 安装docker&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Docker 分为 CE 和 EE 两大版本。
      
    
    </summary>
    
    
      <category term="elk" scheme="http://pibigstar.com/categories/elk/"/>
    
    
      <category term="elasticsearch" scheme="http://pibigstar.com/tags/elasticsearch/"/>
    
      <category term="docker-compose" scheme="http://pibigstar.com/tags/docker-compose/"/>
    
      <category term="logstash" scheme="http://pibigstar.com/tags/logstash/"/>
    
      <category term="kibana" scheme="http://pibigstar.com/tags/kibana/"/>
    
      <category term="cerebro" scheme="http://pibigstar.com/tags/cerebro/"/>
    
  </entry>
  
  <entry>
    <title>面试总结---网络部分</title>
    <link href="http://pibigstar.com/2019/09/17/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93---%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86/"/>
    <id>http://pibigstar.com/2019/09/17/面试总结---网络部分/</id>
    <published>2019-09-17T10:06:04.000Z</published>
    <updated>2019-09-30T03:12:59.236Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-浏览器发送一个请求经历了那些过程"><a href="#1-浏览器发送一个请求经历了那些过程" class="headerlink" title="1. 浏览器发送一个请求经历了那些过程"></a>1. 浏览器发送一个请求经历了那些过程</h2><p><img src="https://images2017.cnblogs.com/blog/591234/201710/591234-20171031183032183-2002446965.png" alt="请求过程"></p><ol><li>输入URL，浏览器解析出domain</li><li>将domain发送给DNS解析器解析出IP地址1返回给浏览器</li><li>将IP地址和请求参数封装到数据报中</li><li>发起TCP的三次握手</li><li>建立TCP链接后发送http请求（数据报）</li><li>服务器处理请求并返回Response</li></ol><p><strong>http 协议属于应用层协议，http 基于 tcp 协议，所以 client 与 server 主要通过 socket 进行通讯</strong></p><blockquote><p>用户首先在浏览器输入请求的url地址，浏览器内部的核心代码会将这个url进行拆分解析，最终将domain发送到DNS服务器上，DNS服务器会根据domain去查询相关对于的ip地址，从而将IP地址返回给浏览器，浏览器持有ip地址后就会知道这个请求是要发送到哪个地方（哪个服务器上），然后跟随协议，将ip地址打在协议中，并且请求的相关的参数都会在协议中携带，最终发送到网络中去<br>然后经过我们自己的局域网——交换机——路由器——主干网络——最终到达服务端</p></blockquote><blockquote><p>服务端是有个MVC架构的请求会首先进入到Controller中进行相关的逻辑处理和请求的分发——调用Model层（负责和数据进行交互）数据交互的过程中Model会去读取redis和数据库里面的数据——获取到数据之后叫渲染好的页面通过View层返回给网络<br>这时候一个HTTP请求的Response又从服务端返回到浏览器，浏览器做一个render的过程（就是根据请求回来的html以及这个html所关联的css，js去进行渲染的过程，那么渲染的过程中浏览器会根据html去形成相关的dom树以及对应的css树，然后对dom树和css树进行整合，最终知道某个dom节点知道需要什么样的样式，从而进行样式的渲染）样式渲染完成之后，浏览器会进一步去执行下面的js脚本，执行动态的页面的能力，从而最终的页面就在浏览器中展现出来了</p></blockquote><h3 id="1-1-TCP连接过程中的三次握手和四次挥手"><a href="#1-1-TCP连接过程中的三次握手和四次挥手" class="headerlink" title="1.1 TCP连接过程中的三次握手和四次挥手"></a>1.1 TCP连接过程中的三次握手和四次挥手</h3><p><img src="https://img-blog.csdn.net/20161207164845479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMjE0NTU5ODU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p><blockquote><ol><li>序号：Seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li><li>确认序号：Ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1。</li><li>标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：<ul><li>URG：紧急指针（urgent pointer）有效。</li><li>ACK：确认序号有效。</li><li>PSH：接收方应该尽快将这个报文交给应用层。</li><li>RST：重置连接。</li><li>SYN：发起一个新连接。</li><li>FIN：释放一个连接。</li></ul></li></ol></blockquote><h4 id="1-11-三次握手"><a href="#1-11-三次握手" class="headerlink" title="1.11 三次握手"></a>1.11 三次握手</h4><ol><li><p>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p></li><li><p>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack (number )=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</p></li><li><p>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p></li></ol><h4 id="1-12-四次挥手"><a href="#1-12-四次挥手" class="headerlink" title="1.12 四次挥手"></a>1.12 四次挥手</h4><p><strong>断开连接端可以是Client端，也可以是Server端。假设Client端发起中断连接请求：</strong></p><ol><li><p>第一次挥手：客户端先发送FIN报文（第24帧），用来关闭主动方到被动关闭方的数据传送，也就是客户端告诉服务器：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，客户端依然会重发这些数据)，但此时客户端还可以接受数据。</p></li><li><p>第二次挥手：Server端接到FIN报文后，但是如果还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以服务器端先发送ACK（第25帧），告诉Client端：请求已经收到了，但是我还没准备好，请继续等待停止的消息。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。</p></li><li><p>第三次挥手：当Server端确定数据已发送完成，则向Client端发送FIN报文（第26帧），告诉Client端：服务器这边数据发完了，准备好关闭连接了。</p></li><li><p>第四次挥手：Client端收到FIN报文后，就知道可以关闭连接了，但是他还是不相信网络，所以发送ACK后进入TIME_WAIT状态（第27帧）， Server端收到ACK后，就知道可以断开连接了。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，最后，Client端也可以关闭连接了至此，TCP连接就已经完全关闭了！</p></li></ol><h2 id="2-IP地址"><a href="#2-IP地址" class="headerlink" title="2. IP地址"></a>2. IP地址</h2><h3 id="2-1-IP分类"><a href="#2-1-IP分类" class="headerlink" title="2.1 IP分类"></a>2.1 IP分类</h3><p> <strong>A、B、C、D、E五类地址</strong></p><blockquote><ol><li>A类地址由政府机构使用。<br>区别：A类地址的第1字节是网络的地址，其它的3个字节为主机的地址。<br>A类地址范围为：1.0.0.1-126.255.255.254。<br><img src="http://p9.qhimg.com/t0165d2d917a3fb3ff4.jpg" alt></li></ol></blockquote><blockquote><ol start="2"><li>B类地址有中等等级公司使用。<br>区别：B类地址的第1字节和第2字节是网络地址，其它2个字节为主机的地址。B类地址范围：128.0.0.1—191.255.255.254。<br><img src="http://p1.qhimg.com/t01ce26c4eb1f5c10d1.jpg" alt></li></ol></blockquote><blockquote><ol start="3"><li>C类地址分配给需要的个人。<br>区别：C类地址第1字节、第2字节和第3个字节为网络地址，最后一个字节为主机地址。并且第1个字节的前三位都是110。C类地址范围：192.0.0.1—223.255.255.254。<br><img src="http://p8.qhimg.com/t0185530c02084afc3b.jpg" alt></li></ol></blockquote><blockquote><ol start="4"><li>D类地址用于组播。<br>区别：D类地址不分网络地址和主机地址，但它的第1个字节的前四位都是1110。D类地址范围：224.0.0.1—239.255.255.254<br><img src="http://p4.qhimg.com/t01d823bbfdd6548ac2.jpg" alt></li></ol></blockquote><blockquote><ol start="5"><li>E类地址用于实验。<br>区别：E类地址也不分网络地址和主机地址，但它的第1个字节的前五位都是11110。E类地址范围：240.0.0.1—255.255.255.254<br><img src="http://p4.qhimg.com/t01f6795e56d204b583.jpg" alt></li></ol></blockquote><h3 id="2-2-求子网数和主机数"><a href="#2-2-求子网数和主机数" class="headerlink" title="2.2 求子网数和主机数"></a>2.2 求子网数和主机数</h3><p>202.112.78.0 是个C类IP 前3位为网络位 最后一位是主机位<br>子网掩码是255.255.255.192（11111111.11111111.11111111.11000000）<br>说明 向主机位借2位 </p><p>（11000000  11为子网 000000为主机）<br>所以 n = 2 ，m = 6</p><ol><li>求子网数公式：</li></ol><blockquote><p>2的n次方-2 = 可划分的子网数 </p></blockquote><blockquote><p>n=2 所以可以划分2个子网</p></blockquote><ol start="2"><li>求主机数公式：</li></ol><blockquote><p>2的m次方 - 2 = 每个子网的主机主机数</p></blockquote><blockquote><p>又因为m=6</p></blockquote><h3 id="2-3-求子网掩码"><a href="#2-3-求子网掩码" class="headerlink" title="2.3 求子网掩码"></a>2.3 求子网掩码</h3><blockquote><ol><li>利用子网数来计算</li></ol></blockquote><blockquote><p>在求子网掩码之前必须先搞清楚要划分的子网数目，以及每个子网内的所需主机数目。</p></blockquote><blockquote><p>1)将子网数目转化为二进制来表示</p></blockquote><blockquote><p>2)取得该二进制的位数，为 N</p></blockquote><blockquote><p>3)取得该IP地址的类子网掩码，将其主机地址部分的的前N位置 1 即得出该IP地址划分子网的子网掩码。</p></blockquote><blockquote><p>如欲将B类IP地址168.195.0.0划分成27个子网：</p></blockquote><blockquote><p>1)27=11011</p></blockquote><blockquote><p>2)该二进制为五位数，N = 5</p></blockquote><blockquote><p>3)将B类地址的子网掩码255.255.0.0的主机地址前5位置 1，得到 255.255.248.0</p></blockquote><blockquote><p>即为划分成 27个子网的B类IP地址 168.195.0.0的子网掩码。</p></blockquote><blockquote><ol start="2"><li>利用主机数来计算</li></ol></blockquote><blockquote><p>1)将主机数目转化为二进制来表示</p></blockquote><blockquote><p>2)如果主机数小于或等于254（注意去掉保留的两个IP地址），则取得该主机的二进制位数，为 N，这里肯定 N&lt;8。如果大于254，则 N&gt;8，这就是说主机地址将占据不止8位。</p></blockquote><blockquote><p>3)使用255.255.255.255来将该类IP地址的主机地址位数全部置1，然后从后向前的将N位全部置为 0，即为子网掩码值。</p></blockquote><h2 id="3-TCP-IP协议"><a href="#3-TCP-IP协议" class="headerlink" title="3. TCP/IP协议"></a>3. TCP/IP协议</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><blockquote><p>  TCP/IP协议是一个协议集合。大家叫的时候方便说，所以统称为TCP/IP。TCP/IP协议族中有一个重要的概念是分层，TCP/IP协议按照层次分为以下四层。应用层、传输层、网络层、数据链路层。为什么要分层？这就如同邓小平1978年的大包干，责任到人。一个层只负责一个层次的问题，如果出问题了，和其他的层次无关，只要维护这个层次也就好了。其实编程语言里也能体现这个分层理论，即封转性、隔离。</p></blockquote><p><img src="https://img-blog.csdn.net/20180430100252116?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="TCP/IP"></p><p><strong>TCP/IP通信数据流</strong></p><p><img src="https://img-blog.csdn.net/20180430100443752?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="数据流"></p><h3 id="3-2-IP协议"><a href="#3-2-IP协议" class="headerlink" title="3.2 IP协议"></a>3.2 IP协议</h3><p><strong>属于网络层</strong></p><blockquote><p> IP协议：IP(Internet protocol),这里的IP不是值得我们通常所说的192.168.1.1.这个IP指的是一种协议，而后面的数字值得是IP地址。IP协议的作用在于把各种数据包准确无误的传递给对方，其中两个重要的条件是IP地址，和MAC地址（Media Access Control Address）。由于IP地址是稀有资源，不可能每个人都拥有一个IP地址，所以我们通常的IP地址是路由器给我们生成的IP地址，路由器里面会记录我们的MAC地址。而MAC地址是全球唯一的，除去人为因素外不可能重复。举一个现实生活中的例子，IP地址就如同是我们居住小区的地址，而MAC地址就是我们住的那栋楼那个房间那个人。</p></blockquote><h3 id="3-3-ARP协议"><a href="#3-3-ARP协议" class="headerlink" title="3.3 ARP协议"></a>3.3 ARP协议</h3><p><strong>属于数据链路层</strong><br><strong>使用 ARP 协议凭借 MAC 地址进行通信</strong></p><blockquote><p> IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网（LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址</p></blockquote><p><img src="https://img-blog.csdn.net/20180430100808172?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="APR查找MAC"></p><h3 id="3-4-TCP协议"><a href="#3-4-TCP协议" class="headerlink" title="3.4 TCP协议"></a>3.4 TCP协议</h3><p><strong>属于传输层</strong><br><strong>如果说IP协议是找到对方的详细地址。那么TCP协议就是把安全的把东西带给对方。各有分工，互不冲突。</strong></p><blockquote><p>按层次分，TCP属于传输层，提供可靠的字节流服务。什么叫字节流服务呢？这个名字听起来让人不知所以然，下面听下我通俗的解释。所谓的字节流，其实就类似于信息切割。比如你是一个卖自行车的，你要去送货。安装好的自行车，太过庞大，又不稳定，容易损伤。不如直接把自行车拆开来，每个零件上都贴上收货人的姓名。最后送到后按照把属于同一个人的自行车再组装起来，这个拆解、运输、拼装的过程其实就是TCP字节流的过程。</p></blockquote><p><strong>用漫画来表示三次握手</strong><br><img src="https://img-blog.csdn.net/20180430101710600?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="三次握手"></p><h3 id="3-5-DNS协议"><a href="#3-5-DNS协议" class="headerlink" title="3.5 DNS协议"></a>3.5 DNS协议</h3><p><strong>属于应用层</strong><br><strong>DNS：DNS(Domain names System) 和HTTP协议一样是处于应用层的服务，提供域名到IP地址之间的解析服务。</strong></p><blockquote><p>互联网之间是通过IP地址通信的，但是IP地址并不符合认得记忆习惯，人喜欢记忆有意义的字词。所以DNS服务就为了解决这个问题而生了。其实很好理解，形如我们电脑中host文件，当我们添加下面一句配置后：<br>192.168.1.11       roverliang.com<br>当我们访问roverliang.com 的时候，电脑便不会去外网服务器上查询了，直接去访问192.168.1.111。这是一个简单的域名劫持，足以说明DNS的涵义了。</p></blockquote><p><strong>用一个漫画表示DNS解析过程</strong><br><img src="https://img-blog.csdn.net/20180430102037514?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h2 id="4-七层架构与五层架构"><a href="#4-七层架构与五层架构" class="headerlink" title="4. 七层架构与五层架构"></a>4. 七层架构与五层架构</h2><p>*<em>TCP/IP五层模型: *</em></p><ul><li>物理层</li><li>数据链路层：ARP,RARP</li><li>网络层： IP,ICMP,IGMP</li><li>传输层：TCP ,UDP,UGP</li><li>应用层：Telnet,FTP,SMTP,SNMP,DNS</li></ul><p><strong>OSI模型:</strong></p><ul><li>物理层：EIA/TIA-232, EIA/TIA-499, V.35, V.24, RJ45, Ethernet, 802.3, 802.5, FDDI, NRZI, NRZ, B8ZS</li><li>数据链路层：Frame Relay, HDLC, PPP, IEEE 802.3/802.2, FDDI, ATM,  IEEE 802.5/802.2</li><li>网络层：IP，IPX，AppleTalk DDP</li><li>传输层：TCP，UDP，SPX</li><li>会话层：RPC,SQL,NFS,NetBIOS,names,AppleTalk,ASP,DECnet,SCP</li><li>表示层:TIFF,GIF,JPEG,PICT,ASCII,EBCDIC,encryption,MPEG,MIDI,HTML</li><li>应用层：FTP,WWW,Telnet,NFS,SMTP,Gateway,SNMP</li></ul><p><strong>对应关系：</strong></p><ul><li><p>对应的协议<br><img src="https://img-blog.csdn.net/20180430102921754?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p></li><li><p>对应的设备<br><img src="https://img-blog.csdn.net/20180430102809549?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="OSI对象TCP/IP"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-浏览器发送一个请求经历了那些过程&quot;&gt;&lt;a href=&quot;#1-浏览器发送一个请求经历了那些过程&quot; class=&quot;headerlink&quot; title=&quot;1. 浏览器发送一个请求经历了那些过程&quot;&gt;&lt;/a&gt;1. 浏览器发送一个请求经历了那些过
      
    
    </summary>
    
    
      <category term="面试" scheme="http://pibigstar.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="计算机网络" scheme="http://pibigstar.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>golang对接支付宝支付</title>
    <link href="http://pibigstar.com/2019/09/15/golang%E5%AF%B9%E6%8E%A5%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
    <id>http://pibigstar.com/2019/09/15/golang对接支付宝支付/</id>
    <published>2019-09-15T11:07:04.000Z</published>
    <updated>2019-09-30T03:12:58.800Z</updated>
    
    <content type="html"><![CDATA[<p>本文采用沙箱环境</p><h1 id="1-开启沙箱"><a href="#1-开启沙箱" class="headerlink" title="1. 开启沙箱"></a>1. 开启沙箱</h1><p>文档：<a href="https://docs.open.alipay.com/200/105311/" target="_blank" rel="noopener">https://docs.open.alipay.com/200/105311/</a><br>沙箱地址：<a href="https://openhome.alipay.com/platform/appDaily.htm" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm</a></p><h1 id="2-生成应用公钥和秘钥（已弃用）"><a href="#2-生成应用公钥和秘钥（已弃用）" class="headerlink" title="2. 生成应用公钥和秘钥（已弃用）"></a>2. 生成应用公钥和秘钥（已弃用）</h1><blockquote><p>本文中的签名方法默认为 RSA2，采用支付宝提供的 RSA签名&amp;验签工具 生成秘钥时，秘钥的格式必须为 PKCS1，秘钥长度推荐 2048。所以在支付宝管理后台请注意配置 RSA2(SHA256)密钥。<br>生成秘钥对之后，将公钥提供给支付宝（通过支付宝后台上传）对我们请求的数据进行签名验证，我们的代码中将使用私钥对请求数据签名。</p></blockquote><p>RSA签名和验证工具下载：<a href="https://docs.open.alipay.com/291/105971" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105971</a></p><ol><li>下载之后解压</li><li>双击<code>RSA签名验签工具.bat</code></li><li>秘钥格式选择<code>PKCS1</code></li><li>点击生成秘钥</li><li>复制公钥</li><li>回到沙箱中，点击查看应用公钥，然后点击修改<br><img src="https://img-blog.csdnimg.cn/201907201240149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></li><li>保存好私钥，我们一会需要在代码中用到</li><li>复制支付宝公钥，代码中验证需要用到<br><img src="https://img-blog.csdnimg.cn/20190720133503423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></li><li>配置支付成功后的回调地址（这必须是个公网地址）<br><img src="https://img-blog.csdnimg.cn/20190727161229344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt><h1 id="3-证书认证"><a href="#3-证书认证" class="headerlink" title="3. 证书认证"></a>3. 证书认证</h1><blockquote><p>目前新创建的支付宝应用只支持证书方式认证，已经弃用之前的公钥和私钥的方式</p></blockquote></li></ol><p><strong>公钥秘钥说明</strong></p><blockquote><p>我们生成秘钥对之后，将公钥提供给支付宝（通过支付宝后台上传）对我们请求的数据进行签名验证，我们的代码中使用私钥对请求数据签名。</p></blockquote><ul><li>证书签名请求文件（用来提交给支付宝后台生成证书的）</li><li>应用私钥（调用支付宝接口的时候，我们需要使用该私钥对参数进行签名）</li><li>支付宝公钥证书（用来验证我们的签名的，现在已经被支付宝公钥证书取代）</li></ul><h2 id="3-1-下载生成工具"><a href="#3-1-下载生成工具" class="headerlink" title="3.1 下载生成工具"></a>3.1 下载生成工具</h2><p>下载地址与文档：<a href="https://docs.open.alipay.com/291/105971" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105971</a><br><img src="https://img-blog.csdnimg.cn/20190920212402568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p><h2 id="3-2-生成csr证书签名请求文件"><a href="#3-2-生成csr证书签名请求文件" class="headerlink" title="3.2 生成csr证书签名请求文件"></a>3.2 生成csr证书签名请求文件</h2><p>工具安装好之后打开，点击获取<br><img src="https://img-blog.csdnimg.cn/20190920212856648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p><h2 id="3-3-输入信息"><a href="#3-3-输入信息" class="headerlink" title="3.3 输入信息"></a>3.3 输入信息</h2><blockquote><p>主要是组织/公司这块一定要写的和你支付宝中应用的名一样，不然不会通过的，填写完毕之后点击<code>生成CSR文件</code> ，点击页面的打开文件位置，就可以看到三个文件了，分别是<code>证书签名请求文件</code>，<code>应用公钥</code>，<code>应用私钥</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190920212925809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p><h2 id="3-4-上传CSR证书签名请求文件"><a href="#3-4-上传CSR证书签名请求文件" class="headerlink" title="3.4 上传CSR证书签名请求文件"></a>3.4 上传CSR证书签名请求文件</h2><blockquote><p>回到支付宝后台，点击 <code>接口加签方式</code> 设置，选择公钥证书，点击上次CSR生成证书，把我们刚才生成的那个证书(<code>.csr</code>)上传进去</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190920213258422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p><h2 id="3-5-下载证书"><a href="#3-5-下载证书" class="headerlink" title="3.5 下载证书"></a>3.5 下载证书</h2><p>上传好之后，会弹出让你下载证书的页面，把那三个证书都下载下来，分别是: 应用公钥证书，支付宝公钥证书，支付宝根证书<br><img src="https://img-blog.csdnimg.cn/20190920213958158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><p>下载第三方库<br><code>go get github.com/smartwalle/alipay/v3</code></p><h3 id="1-网页扫码支付"><a href="#1-网页扫码支付" class="headerlink" title="1. 网页扫码支付"></a>1. 网页扫码支付</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/smartwalle/alipay"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// appId</span></span><br><span class="line">appId = <span class="string">""</span></span><br><span class="line"><span class="comment">// 应用公钥</span></span><br><span class="line">aliPublicKey = <span class="string">""</span></span><br><span class="line"><span class="comment">// 应用私钥</span></span><br><span class="line">privateKey = <span class="string">""</span></span><br><span class="line">client, _ = alipay.New(appId, aliPublicKey, privateKey, <span class="literal">false</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">client.LoadAppPublicCert(<span class="string">"应用公钥证书"</span>)</span><br><span class="line">client.LoadAliPayPublicCert(<span class="string">"支付宝公钥证书"</span>)</span><br><span class="line">client.LoadAliPayRootCert(<span class="string">"支付宝根证书"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网站扫码支付</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WebPageAlipay</span><span class="params">()</span></span> &#123;</span><br><span class="line">pay := alipay.AliPayTradePagePay&#123;&#125;</span><br><span class="line"><span class="comment">// 支付宝回调地址（需要在支付宝后台配置）</span></span><br><span class="line"><span class="comment">// 支付成功后，支付宝会发送一个POST消息到该地址</span></span><br><span class="line">pay.NotifyURL = <span class="string">"http://www.pibigstar/alipay"</span></span><br><span class="line"><span class="comment">// 支付成功之后，浏览器将会重定向到该 URL</span></span><br><span class="line">pay.ReturnURL = <span class="string">"http://localhost:8088/return"</span></span><br><span class="line"><span class="comment">//支付标题</span></span><br><span class="line">pay.Subject = <span class="string">"支付宝支付测试"</span></span><br><span class="line"><span class="comment">//订单号，一个订单号只能支付一次</span></span><br><span class="line">pay.OutTradeNo = time.Now().String()</span><br><span class="line"><span class="comment">//销售产品码，与支付宝签约的产品码名称,目前仅支持FAST_INSTANT_TRADE_PAY</span></span><br><span class="line">pay.ProductCode = <span class="string">"FAST_INSTANT_TRADE_PAY"</span></span><br><span class="line"><span class="comment">//金额</span></span><br><span class="line">pay.TotalAmount = <span class="string">"0.01"</span></span><br><span class="line"></span><br><span class="line">url, err := client.TradePagePay(pay)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">payURL := url.String()</span><br><span class="line"><span class="comment">//这个 payURL 即是用于支付的 URL，可将输出的内容复制，到浏览器中访问该 URL 即可打开支付页面。</span></span><br><span class="line">fmt.Println(payURL)</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开默认浏览器</span></span><br><span class="line">payURL = strings.Replace(payURL,<span class="string">"&amp;"</span>,<span class="string">"^&amp;"</span>,<span class="number">-1</span>)</span><br><span class="line">exec.Command(<span class="string">"cmd"</span>, <span class="string">"/c"</span>, <span class="string">"start"</span>,payURL).Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机客户端支付</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WapAlipay</span><span class="params">()</span></span> &#123;</span><br><span class="line">pay := alipay.AliPayTradeWapPay&#123;&#125;</span><br><span class="line"><span class="comment">// 支付成功之后，支付宝将会重定向到该 URL</span></span><br><span class="line">pay.ReturnURL = <span class="string">"http://localhost:8088/return"</span></span><br><span class="line"><span class="comment">//支付标题</span></span><br><span class="line">pay.Subject = <span class="string">"支付宝支付测试"</span></span><br><span class="line"><span class="comment">//订单号，一个订单号只能支付一次</span></span><br><span class="line">pay.OutTradeNo = time.Now().String()</span><br><span class="line"><span class="comment">//商品code</span></span><br><span class="line">pay.ProductCode = time.Now().String()</span><br><span class="line"><span class="comment">//金额</span></span><br><span class="line">pay.TotalAmount = <span class="string">"0.01"</span></span><br><span class="line"></span><br><span class="line">url, err := client.TradeWapPay(pay)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">payURL := url.String()</span><br><span class="line"><span class="comment">//这个 payURL 即是用于支付的 URL，可将输出的内容复制，到浏览器中访问该 URL 即可打开支付页面。</span></span><br><span class="line">fmt.Println(payURL)</span><br><span class="line"><span class="comment">//打开默认浏览器</span></span><br><span class="line">payURL = strings.Replace(payURL,<span class="string">"&amp;"</span>,<span class="string">"^&amp;"</span>,<span class="number">-1</span>)</span><br><span class="line">exec.Command(<span class="string">"cmd"</span>, <span class="string">"/c"</span>, <span class="string">"start"</span>,payURL).Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//生成支付URL</span></span><br><span class="line">WapAlipay()</span><br><span class="line"><span class="comment">//支付成功之后的返回URL页面</span></span><br><span class="line">http.HandleFunc(<span class="string">"/return"</span>, <span class="function"><span class="keyword">func</span><span class="params">(rep http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">req.ParseForm()</span><br><span class="line">ok, err := client.VerifySign(req.Form)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; ok &#123;</span><br><span class="line">rep.Write([]<span class="keyword">byte</span>(<span class="string">"支付成功"</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//支付成功之后的通知页面</span></span><br><span class="line">http.HandleFunc(<span class="string">"/alipay"</span>, <span class="function"><span class="keyword">func</span><span class="params">(rep http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> noti, _ = client.GetTradeNotification(req)</span><br><span class="line"><span class="keyword">if</span> noti != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"支付成功"</span>)</span><br><span class="line"><span class="comment">//修改订单状态。。。。</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"支付失败"</span>)</span><br><span class="line">&#125;</span><br><span class="line">alipay.AckNotification(rep) <span class="comment">// 确认收到通知消息</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"server start...."</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">":8088"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文采用沙箱环境&lt;/p&gt;
&lt;h1 id=&quot;1-开启沙箱&quot;&gt;&lt;a href=&quot;#1-开启沙箱&quot; class=&quot;headerlink&quot; title=&quot;1. 开启沙箱&quot;&gt;&lt;/a&gt;1. 开启沙箱&lt;/h1&gt;&lt;p&gt;文档：&lt;a href=&quot;https://docs.open.alipay
      
    
    </summary>
    
    
      <category term="go" scheme="http://pibigstar.com/categories/go/"/>
    
    
      <category term="支付宝" scheme="http://pibigstar.com/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
      <category term="golang" scheme="http://pibigstar.com/tags/golang/"/>
    
      <category term="打开浏览器" scheme="http://pibigstar.com/tags/%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装Jenkins</title>
    <link href="http://pibigstar.com/2019/09/15/Linux%E5%AE%89%E8%A3%85Jenkins/"/>
    <id>http://pibigstar.com/2019/09/15/Linux安装Jenkins/</id>
    <published>2019-09-15T11:07:04.000Z</published>
    <updated>2019-09-30T03:12:59.160Z</updated>
    
    <content type="html"><![CDATA[<p>环境：Centos、JDK1.8</p><h1 id="1-下载安装Jenkins"><a href="#1-下载安装Jenkins" class="headerlink" title="1. 下载安装Jenkins"></a>1. 下载安装Jenkins</h1><p>点击查看<a href="https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions#InstallingJenkinson" target="_blank" rel="noopener">官网</a>详细安装</p><p>安装稳定版，依次执行下面语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</span><br><span class="line"></span><br><span class="line">sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br><span class="line"></span><br><span class="line">sudo yum install jenkins</span><br></pre></td></tr></table></figure><h1 id="2-修改JDK路径"><a href="#2-修改JDK路径" class="headerlink" title="2. 修改JDK路径"></a>2. 修改JDK路径</h1><p>查看当前JDK安装路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure><p>修改Jenkins启动时搜索的JDK路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.d/init.d/jenkins</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190121140419593.png" alt><br>将这个改为你的JDK路径，也就是<code>echo $JAVA_HOME</code>输出的内容加上 <code>/bin/java</code></p><h1 id="3-修改端口"><a href="#3-修改端口" class="headerlink" title="3. 修改端口"></a>3. 修改端口</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p>将JENKINS_PORT=”8080”修改为JENKINS_PORT=”9000”</p><h1 id="4-重启Jenkins"><a href="#4-重启Jenkins" class="headerlink" title="4. 重启Jenkins"></a>4. 重启Jenkins</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service jenkins restart</span><br></pre></td></tr></table></figure><h1 id="5-进入网站开始布置"><a href="#5-进入网站开始布置" class="headerlink" title="5. 进入网站开始布置"></a>5. 进入网站开始布置</h1><p>打开<code>http://你的ip:9000</code>开始布置Jenkins</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：Centos、JDK1.8&lt;/p&gt;
&lt;h1 id=&quot;1-下载安装Jenkins&quot;&gt;&lt;a href=&quot;#1-下载安装Jenkins&quot; class=&quot;headerlink&quot; title=&quot;1. 下载安装Jenkins&quot;&gt;&lt;/a&gt;1. 下载安装Jenkins&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="工具使用,Linux" scheme="http://pibigstar.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-Linux/"/>
    
    
      <category term="jenkins" scheme="http://pibigstar.com/tags/jenkins/"/>
    
      <category term="Linux" scheme="http://pibigstar.com/tags/Linux/"/>
    
      <category term="持续集成" scheme="http://pibigstar.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>git高级使用</title>
    <link href="http://pibigstar.com/2019/09/12/git%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <id>http://pibigstar.com/2019/09/12/git高级使用/</id>
    <published>2019-09-12T13:09:04.000Z</published>
    <updated>2019-09-30T03:12:58.752Z</updated>
    
    <content type="html"><![CDATA[<p>此篇是为了我以后回顾而写的，所以写的有点简单，也有点乱，如果想系统的学习，请去这个网站：<a href="https://learngitbranching.js.org" target="_blank" rel="noopener">https://learngitbranching.js.org</a></p><p>此网站常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回到关卡选择页面</span></span><br><span class="line">levels</span><br><span class="line"><span class="comment"># 查看答案</span></span><br><span class="line">show solution</span><br><span class="line"><span class="comment"># 重新开始</span></span><br><span class="line">level advance3</span><br></pre></td></tr></table></figure><h1 id="1-rebase"><a href="#1-rebase" class="headerlink" title="1. rebase"></a>1. rebase</h1><ul><li><p><strong>合并分支</strong><br>我在bugFix分支来rebase master分支，那么我这个bugFix 分支就是基于master分支的一个新的节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到bugFix分支</span></span><br><span class="line">git checkout bugFix </span><br><span class="line"><span class="comment"># 让bugFix分支融合master分支的内容</span></span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure></li><li><p><strong>合并提交</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并这次与上次提交</span></span><br><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure></li><li><p><strong>解决远程仓库fast-forward</strong><br>当我们提交代码时，可能别人已经提交过内容到远程仓库了，这时我们提交代码时就会提醒我们<code>fast-forward</code>，让我们先更新下代码再提交，我们可以用<code>rebase</code>很快的解决这个问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先拉取最新代码进行rebase</span></span><br><span class="line">git pull --rebase origin master</span><br><span class="line"><span class="comment"># 然后再提交</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p><strong>本地分支与远程分支关联</strong><br>将本地master分支与远程master分支关联，这样可以在master分支中直接执行<code>git pull</code>进行拉取代码，不用再指定后面的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/master  master</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-merge"><a href="#2-merge" class="headerlink" title="2. merge"></a>2. merge</h1><blockquote><p>我在master分支来merge bugFix分支，那么我这个master分支就是在master分支的基础上再次融合bugFix分支的内容。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 融合bugFix分支的内容</span></span><br><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure><h1 id="3-checkout"><a href="#3-checkout" class="headerlink" title="3. checkout"></a>3. checkout</h1><ul><li><p><strong>移动当前分支</strong><br>也可以理解为回滚上一次提交，放弃本次提交的修改，<code>c2</code>是通过<code>git log</code>进行查看的 <code>commit id</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout c2</span><br></pre></td></tr></table></figure></li><li><p><strong>移动某个分支</strong></p><blockquote><p>移动提交记录。也可以理解为回滚，回滚到上一次提交，移动分支到某个提交记录处，</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -f bugFix c2</span><br></pre></td></tr></table></figure></li></ul><p>也可以直接通过<code>HEAD^</code>来指向上一个提交记录，或通过<code>HEAD~3</code> 往上移动3级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -f bugFix HEAD^</span><br><span class="line">git branch -f bugFix HEAD~2</span><br></pre></td></tr></table></figure><h1 id="4-reset"><a href="#4-reset" class="headerlink" title="4. reset"></a>4. reset</h1><blockquote><p>回退到上一次提交的版本，</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回到此分支的上一个提交</span></span><br><span class="line">git reset HEAD^</span><br><span class="line"><span class="comment"># 回到master分支的上一个提交</span></span><br><span class="line">git reset master^</span><br></pre></td></tr></table></figure><p>如果是远程也想要回退到上一个版本，可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD^</span><br></pre></td></tr></table></figure><p>如果想撤销远程分支上的内容需要使用git revert，它会新创建一个提交，而新创建的提交的状态正好等于你上一个版本的状态，假如我们现在的版本是<code>c2</code>,它上一个版本就是<code>c1</code>，那么执行完这个命令之后，就会新创建一个提交 为 <code>c1’</code>,它与<code>c1</code>的内容一致，我们将这它推送到远程端，别人更新之后就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD^</span><br></pre></td></tr></table></figure><h1 id="5-cherry-pick"><a href="#5-cherry-pick" class="headerlink" title="5. cherry-pick"></a>5. cherry-pick</h1><blockquote><p>将其他提交，抓过来，放到此分支下面, <code>c2</code>，<code>c2</code>，<code>c7</code>是<code>git log</code>中的<code>commit id</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到master分支</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 将其他分支的提交，拿过来，放到master上，特别注意，这几个记录的顺序问题</span></span><br><span class="line">git cherry-pick c2 c4 c7</span><br><span class="line"><span class="comment"># 结果: HEAD——&gt; c7——&gt; c4——&gt; c2</span></span><br></pre></td></tr></table></figure><h1 id="6-tag"><a href="#6-tag" class="headerlink" title="6. tag"></a>6. tag</h1><blockquote><p>也就是做个锚点，因为分支是很容易被改变，为了防止以后不能返回，所以可以打个tag，做个回滚记录点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># c1 为提交记录的id</span></span><br><span class="line">git tag tag名 c1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此篇是为了我以后回顾而写的，所以写的有点简单，也有点乱，如果想系统的学习，请去这个网站：&lt;a href=&quot;https://learngitbranching.js.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://learngitbra
      
    
    </summary>
    
    
      <category term="工具使用,git" scheme="http://pibigstar.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8-git/"/>
    
    
      <category term="git" scheme="http://pibigstar.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中JSON类型使用</title>
    <link href="http://pibigstar.com/2019/09/12/MySQL%E4%B8%ADJSON%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8/"/>
    <id>http://pibigstar.com/2019/09/12/MySQL中JSON类型使用/</id>
    <published>2019-09-12T13:09:04.000Z</published>
    <updated>2019-09-30T03:12:59.196Z</updated>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="1-结构"><a href="#1-结构" class="headerlink" title="1. 结构"></a>1. 结构</h1><h2 id="1-1-表结构"><a href="#1-1-表结构" class="headerlink" title="1.1 表结构"></a>1.1 表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">10</span>）<span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">content</span> <span class="keyword">JSON</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">  arrs <span class="keyword">JSON</span> <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="1-2-content-结构"><a href="#1-2-content-结构" class="headerlink" title="1.2 content 结构"></a>1.2 content 结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> content <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-arrs-结构"><a href="#1-3-arrs-结构" class="headerlink" title="1.3 arrs 结构"></a>1.3 arrs 结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrs []<span class="keyword">int</span></span><br></pre></td></tr></table></figure><h1 id="2-插入"><a href="#2-插入" class="headerlink" title="2. 插入"></a>2. 插入</h1><h2 id="2-1-字符串插入"><a href="#2-1-字符串插入" class="headerlink" title="2.1 字符串插入"></a>2.1 字符串插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span>(<span class="string">'id'</span>,<span class="string">'content'</span>, <span class="string">'arrs'</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'&#123;"name": "pibigstar","age": 20&#125;'</span>, <span class="string">'[1,2,3]'</span> )</span><br></pre></td></tr></table></figure><h2 id="2-2-JSON函数插入"><a href="#2-2-JSON函数插入" class="headerlink" title="2.2 JSON函数插入"></a>2.2 JSON函数插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span>(<span class="string">'id'</span>,<span class="string">'content'</span>, <span class="string">'arrs'</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, JSON_OBJECT(<span class="string">"name"</span>,<span class="string">"pibigstar"</span>,<span class="string">"age"</span>,<span class="number">20</span>), JSON_ARRAY(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="3-查询"><a href="#3-查询" class="headerlink" title="3. 查询"></a>3. 查询</h2><blockquote><p>查询JSON中的数据用 column-&gt;path的形式，其中对象类型path的表示方式 .path</p></blockquote><h2 id="3-1-查询内容"><a href="#3-1-查询内容" class="headerlink" title="3.1 查询内容"></a>3.1 查询内容</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">content</span>-&gt;<span class="string">'$.name'</span> <span class="keyword">AS</span> <span class="keyword">name</span>, <span class="keyword">content</span>-&gt;<span class="string">'$.age'</span> <span class="keyword">AS</span> age, arrs-&gt;<span class="string">'$[0]'</span> <span class="keyword">AS</span> arr1,arrs-&gt;<span class="string">'$[1]'</span> <span class="keyword">AS</span> arr2 <span class="keyword">FROM</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><p>当JSON里面的字段为string时，使用上面的方式查出来内容的带 <code>“”</code>，可使用 -&gt;&gt; 方式去掉 <code>“”</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,<span class="keyword">content</span>-&gt;&gt;<span class="string">'$.name'</span> <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h2 id="3-2-搜索条件"><a href="#3-2-搜索条件" class="headerlink" title="3.2 搜索条件"></a>3.2 搜索条件</h2><h3 id="3-2-1-全匹配"><a href="#3-2-1-全匹配" class="headerlink" title="3.2.1 全匹配"></a>3.2.1 全匹配</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">content</span> = <span class="keyword">CAST</span>(<span class="string">'&#123;"name": "pibigstar","age": 20&#125;'</span> <span class="keyword">AS</span> <span class="keyword">JSON</span>);</span><br></pre></td></tr></table></figure><h3 id="3-2-2-JSON某字段匹配"><a href="#3-2-2-JSON某字段匹配" class="headerlink" title="3.2.2 JSON某字段匹配"></a>3.2.2 JSON某字段匹配</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">content</span>-&gt;<span class="string">'$.name'</span> = <span class="string">'pibigstar'</span>;</span><br></pre></td></tr></table></figure><p><strong>忽略类型</strong></p><blockquote><p>使用 <code>-&gt;&gt;</code>的方式会忽略其类型</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查不到</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">category</span>-&gt;<span class="string">'$.age'</span> = <span class="string">'20'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 能查到</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> <span class="keyword">category</span>-&gt;&gt;<span class="string">'$.age'</span> = <span class="string">'20'</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-使用JSON函数"><a href="#3-2-2-使用JSON函数" class="headerlink" title="3.2.2 使用JSON函数"></a>3.2.2 使用JSON函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">test</span> <span class="keyword">WHERE</span> JSON_CONTAINS(<span class="keyword">content</span>,<span class="string">'20'</span>,<span class="string">'$.age'</span>);</span><br></pre></td></tr></table></figure><h1 id="4-更新"><a href="#4-更新" class="headerlink" title="4. 更新"></a>4. 更新</h1><h2 id="4-1-全量更新"><a href="#4-1-全量更新" class="headerlink" title="4.1 全量更新"></a>4.1 全量更新</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">content</span> = JSON_OBJECT(<span class="string">"name"</span>,<span class="string">"haimian"</span>,<span class="string">"age"</span>,<span class="number">22</span>)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="4-2-插入新值（不覆盖已存在值）"><a href="#4-2-插入新值（不覆盖已存在值）" class="headerlink" title="4.2 插入新值（不覆盖已存在值）"></a>4.2 插入新值（不覆盖已存在值）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">content</span> = JSON_INSERT(<span class="keyword">content</span>, <span class="string">'$.name'</span>, <span class="string">'haimian'</span>, <span class="string">'$.sex'</span>, <span class="string">'男'</span>)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>执行完之后，name值还是 pibigstar，但会新增加一个 sex字段</p></blockquote><h2 id="4-3-插入新值，并覆盖已存在的值"><a href="#4-3-插入新值，并覆盖已存在的值" class="headerlink" title="4.3 插入新值，并覆盖已存在的值"></a>4.3 插入新值，并覆盖已存在的值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">content</span> = JSON_SET(<span class="keyword">content</span>, <span class="string">'$.name'</span>, <span class="string">'haimian'</span>, <span class="string">'$.age'</span>, <span class="number">22</span>, <span class="string">'$.sex'</span>, <span class="string">'男'</span>)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p> 执行完之后，name会改变，但会新增加一个 sex字段</p></blockquote><h2 id="4-4-替换某字段值"><a href="#4-4-替换某字段值" class="headerlink" title="4.4 替换某字段值"></a>4.4 替换某字段值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">content</span> = JSON_REPLACE(<span class="keyword">content</span>, <span class="string">'$.name'</span>, <span class="string">'haimian'</span>)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>将name从原先的 pibigstar 改为 haimian，它只会替换已存在的字段的值</p></blockquote><h2 id="4-5-删除某字段的值"><a href="#4-5-删除某字段的值" class="headerlink" title="4.5 删除某字段的值"></a>4.5 删除某字段的值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">test</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">content</span> = JSON_REMOVE(<span class="keyword">content</span>, <span class="string">'$.name'</span>, <span class="string">'$.age'</span>)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>删除 name 和 age 字段</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-结构&quot;&gt;&lt;a href=&quot;#1-结构&quot; class=&quot;headerlink&quot; title=&quot;1. 结构&quot;&gt;&lt;/a&gt;1. 结构&lt;/h1&gt;&lt;h2 id=&quot;1-1-表结构&quot;&gt;&lt;a href=&quot;#1-1-表结构&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://pibigstar.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://pibigstar.com/tags/mysql/"/>
    
      <category term="json" scheme="http://pibigstar.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Java中的内存区域划分</title>
    <link href="http://pibigstar.com/2019/09/12/%E6%B5%85%E8%B0%88Java%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/"/>
    <id>http://pibigstar.com/2019/09/12/浅谈Java中的内存区域划分/</id>
    <published>2019-09-12T13:09:04.000Z</published>
    <updated>2019-09-30T03:12:59.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-java中内存区域的划分"><a href="#1-java中内存区域的划分" class="headerlink" title="1. java中内存区域的划分"></a>1. java中内存区域的划分</h1><p>上节谈了Java中的垃圾回收机制，今天我们聊聊Java中内存区域的划分。<br>总得来说Java中内存分为四块：栈、堆、数据域、代码域</p><h2 id="1-栈"><a href="#1-栈" class="headerlink" title="1. 栈"></a>1. 栈</h2><blockquote><p>栈中主要存放基本类型的数据和对象的引用也就是存放变量。</p></blockquote><p>Java虚拟机会为每一个方法申请一个栈空间，在这个方法中声明的变量都是放到此栈中的，他们会随此方法的调用结束而回收掉。</p><p>如果存放的是基本类型数据（普通变量非静态变量），则直接将变量名和值存入栈中的内存中；</p><p>如果是引用类型，则将变量名存入栈，然后指向它new出的对象（存放在堆中）。</p><h2 id="2-堆"><a href="#2-堆" class="headerlink" title="2. 堆"></a>2. 堆</h2><blockquote><p>简单来说就是存放通过关键字new创造出来的对象</p></blockquote><h2 id="3-数据域"><a href="#3-数据域" class="headerlink" title="3. 数据域"></a>3. 数据域</h2><p>数据域分为两块：静态域和常量池</p><p>1.静态域</p><blockquote><p>存放被关键字static修饰的变量也就是静态变量<br>如果该静态变量是基本类型则将变量名和值存入静态域，如果是引用类型则指向new出的对象。</p></blockquote><p>2.常量池<br>通俗来讲就是存放那些被final修饰的变量的值</p><blockquote><p>常量池指的是在编译期被确定，并被保存在已编译的.class文件中的一些数据。除了包含代码中所定义的各种基本类型（如int、long等）和对象型（如String及数组）的<code>常量值</code>还包含一些以文本形式出现的符号引用，比如：类和接口的全限定名；字段的名称和描述符；方法和名称和描述符。</p></blockquote><h2 id="4-代码域"><a href="#4-代码域" class="headerlink" title="4. 代码域"></a>4. 代码域</h2><blockquote><p>就是放代码的区域</p></blockquote><h1 id="2-用图来表示"><a href="#2-用图来表示" class="headerlink" title="2. 用图来表示"></a>2. 用图来表示</h1><h4 id="例1-普通变量和静态变量的创建"><a href="#例1-普通变量和静态变量的创建" class="headerlink" title="例1 普通变量和静态变量的创建"></a>例1 普通变量和静态变量的创建</h4><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"hello"</span>;  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181123195304578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt><br>这里的str是非静态变量所以将其放入到栈中，而静态变量a则需要放入静态域中，对于变量值”abc”和10则都应该放入到常量池当中</p><h4 id="例2-对象的创建"><a href="#例2-对象的创建" class="headerlink" title="例2 对象的创建"></a>例2 对象的创建</h4><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>这里的str是String类型的对象，所以放入栈中，而new出来的东西则放入到堆中，对于初始值”hello”则放入到常量池中。<br><img src="https://img-blog.csdnimg.cn/20181123195319214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p><h4 id="例3-数组的创建"><a href="#例3-数组的创建" class="headerlink" title="例3 数组的创建"></a>例3 数组的创建</h4><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">1</span>;s[<span class="number">1</span>]=<span class="number">2</span>;s[<span class="number">2</span>]=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>这里的s[]是一个数组变量，所以放入到栈中，new出来的东西还是放入到堆中，最后的每个元素的值则放入到常量池当中<br><img src="https://img-blog.csdnimg.cn/20181123195331597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-java中内存区域的划分&quot;&gt;&lt;a href=&quot;#1-java中内存区域的划分&quot; class=&quot;headerlink&quot; title=&quot;1. java中内存区域的划分&quot;&gt;&lt;/a&gt;1. java中内存区域的划分&lt;/h1&gt;&lt;p&gt;上节谈了Java中的垃圾回收机制，今天我
      
    
    </summary>
    
    
      <category term="Java" scheme="http://pibigstar.com/categories/Java/"/>
    
    
      <category term="java" scheme="http://pibigstar.com/tags/java/"/>
    
      <category term="jvm" scheme="http://pibigstar.com/tags/jvm/"/>
    
      <category term="内存区域" scheme="http://pibigstar.com/tags/%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>面试总结---数据库部分</title>
    <link href="http://pibigstar.com/2019/09/06/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93---%E6%95%B0%E6%8D%AE%E5%BA%93%E9%83%A8%E5%88%86/"/>
    <id>http://pibigstar.com/2019/09/06/面试总结---数据库部分/</id>
    <published>2019-09-05T16:12:04.000Z</published>
    <updated>2019-09-30T03:12:59.244Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1-数据库中一些名词的理解"><a href="#1-数据库中一些名词的理解" class="headerlink" title="1. 数据库中一些名词的理解"></a>1. 数据库中一些名词的理解</h2><h3 id="1-1-事务"><a href="#1-1-事务" class="headerlink" title="1.1 事务"></a>1.1 事务</h3><p><strong>是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</strong></p><blockquote><p>一个逻辑工作单元要成为事务，必须满足所谓的ACID（原子性、一致性、隔离性和持久性）属性。事务是数据库运行中的一个逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。</p></blockquote><h4 id="1-1-1-事务的4个特性"><a href="#1-1-1-事务的4个特性" class="headerlink" title="1.1.1 事务的4个特性"></a>1.1.1 事务的4个特性</h4><ul><li><p>原子性(Atomic)：事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。</p></li><li><p>一致性(Consistency)：事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。这种特性称为事务的一致性。假如数据库的状态满足所有的完整性约束，就说该数据库是一致的。</p></li><li><p>隔离性(Isolation)：由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，到底是另一个事务执行之前的状态还是中间某个状态，相互之间存在什么影响，是可以通过隔离级别的设置来控制的。</p></li><li><p>持久性(Durability)：事务结束后，事务处理的结果必须能够得到固化，即写入数据库文件中即使机器宕机数据也不会丢失，它对于系统的影响是永久性的。</p></li></ul><h4 id="1-1-2-事务并发控制"><a href="#1-1-2-事务并发控制" class="headerlink" title="1.1.2 事务并发控制"></a>1.1.2 事务并发控制</h4><blockquote><p>我们从另外一个方向来说说，如果不对事务进行并发控制，我们看看数据库并发操作是会有那些异常情形，有些使我们可以接受的，有些是不能接受的，注意这里的异常就是特定语境下的，并不一定就是错误什么的。假设有一个order表，有个字段叫count，作为计数用，当前值为100</p></blockquote><ul><li><p>第一类丢失更新（Update Lost）：此种更新丢失是因为回滚的原因，所以也叫回滚丢失。此时两个事务同时更新count，两个事务都读取到100，事务一更新成功并提交，count=100+1=101，事务二出于某种原因更新失败了，然后回滚，事务二就把count还原为它一开始读到的100，此时事务一的更新就这样丢失了。</p></li><li><p>脏读（Dirty Read）：此种异常时因为一个事务读取了另一个事务修改了但是未提交的数据。举个例子，事务一更新了count=101，但是没有提交，事务二此时读取count，值为101而不是100，然后事务一出于某种原因回滚了，然后第二个事务读取的这个值就是噩梦的开始。</p></li><li><p>不可重复读（Not Repeatable Read）：此种异常是一个事务对同一行数据执行了两次或更多次查询，但是却得到了不同的结果，也就是在一个事务里面你不能重复（即多次）读取一行数据，如果你这么做了，不能保证每次读取的结果是一样的，有可能一样有可能不一样。造成这个结果是在两次查询之间有别的事务对该行数据做了更新操作。举个例子，事务一先查询了count，值为100，此时事务二更新了count=101，事务一再次读取count,值就会变成101，两次读取结果不一样。</p></li><li><p>第二类丢失更新（Second Update Lost）：此种更新丢失是因为更新被其他事务给覆盖了，也可以叫覆盖丢失。举个例子，两个事务同时更新count，都读取100这个初始值，事务一先更新成功并提交，count=100+1=101，事务二后更新成功并提交，count=100+1=101,由于事务二count还是从100开始增加，事务一的更新就这样丢失了。</p></li><li><p>幻读（Phantom Read）：幻读和不可重复读有点像，只是针对的不是数据的值而是数据的数量。此种异常是一个事务在两次查询的过程中数据的数量不同，让人以为发生幻觉，幻读大概就是这么得来的吧。举个例子，事务一查询order表有多少条记录，事务二新增了一条记录，然后事务一查了一下order表有多少记录，发现和第一次不一样，这就是幻读。</p></li></ul><h3 id="1-2-索引"><a href="#1-2-索引" class="headerlink" title="1.2 索引"></a>1.2 索引</h3><p><strong>索引好比字典的目录，让你按照一定的规则更快的找到目标数据</strong></p><blockquote><p>为什么需要索引？数据在磁盘上是以块的形式存储的。为确保对磁盘操作的原子性，访问数据的时候会一并访问所有数据块。磁盘上的这些数据块与链表类似，即它们都包含一个数据段和一个指针，指针指向下一个节点（数据块）的内存地址，而且它们都不需要连续存储（即逻辑上相邻的数据块在物理上可以相隔很远）。</p></blockquote><p><strong>举个例子</strong><br>我们有一个数据表User.为了简便，这个表没有主键。<br>Identity | Name | Age | Grade<br>——–|——-|——|——<br>1|Robin|28|90<br>5|Lilei|26|60|<br>3|Hanmei|25|50|<br>4|Lucy|27|66|<br>2|Lily|29|80|</p><p>虽然这些数据都存在于一个User表中，但是物理上，<strong>这些数据可能存储在分散的数据块中。</strong><br>查找Lily这个人的信息, 已知Lily的Identity为2， select * fromUser where Identity= 2.</p><h2 id="在查找的时候，首先找到这个表的第一条记录所在的数据库地址，然后发现Identity为1，并不是所需要的值，然后在这个数据库的底端，找到了下一个数据块的地址。（这个类似于链表），如此一来，查询了5次才找到了所需要的值。（为了简单起见，我们考虑Identity不能有重复值）"><a href="#在查找的时候，首先找到这个表的第一条记录所在的数据库地址，然后发现Identity为1，并不是所需要的值，然后在这个数据库的底端，找到了下一个数据块的地址。（这个类似于链表），如此一来，查询了5次才找到了所需要的值。（为了简单起见，我们考虑Identity不能有重复值）" class="headerlink" title="在查找的时候，首先找到这个表的第一条记录所在的数据库地址，然后发现Identity为1，并不是所需要的值，然后在这个数据库的底端，找到了下一个数据块的地址。（这个类似于链表），如此一来，查询了5次才找到了所需要的值。（为了简单起见，我们考虑Identity不能有重复值）"></a>在查找的时候，首先找到这个表的第一条记录所在的数据库地址，然后发现Identity为1，并不是所需要的值，然后在这个数据库的底端，找到了下一个数据块的地址。（这个类似于链表），如此一来，查询了5次才找到了所需要的值。（为了简单起见，我们考虑Identity不能有重复值）</h2><p>为了加快搜索速度，这里就出现了索引。<strong>索引是对某个字段进行排序的一种方式。</strong>对表中的某个字段建立索引会创建另一种数据结构，其中保存着字段的值，每个值又指向与它相关的记录。这种索引的数据结构是经过排序的，因而可以对其执行二分查找。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**创建索引*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> 索引名 <span class="keyword">on</span> 表名（列名）</span><br><span class="line"><span class="comment">/**删除索引*/</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> 索引名</span><br></pre></td></tr></table></figure><h2 id="2-数据库三范式"><a href="#2-数据库三范式" class="headerlink" title="2. 数据库三范式"></a>2. 数据库三范式</h2><ul><li>第一范式（1NF）</li></ul><p><strong>字段具有原子性,不可再分。</strong></p><blockquote><p>所有关系型数据库系统都满足第一范式）数据库表中的字段都是单一属性的，不可再分。例如，姓名字段，其中的姓和名必须作为一个整体，无法区分哪部分是姓，哪部分是名，如果要区分出姓和名，必须设计成两个独立的字段。</p></blockquote><ul><li>第二范式（2NF）</li></ul><p><strong>要有主键，要求其他字段都依赖于主键。</strong></p><blockquote><p>要求数据库表中的每个实例或行必须可以被惟一地区分。通常需要为表加上一个列，以存储各个实例的惟一标识。这个惟一属性列被称为主关键字或主键。<br>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，第二范式就是非主属性非部分依赖于主关键字。 </p></blockquote><ul><li>第三范式（3NF）</li></ul><p><strong>各种信息只在一个地方存储，不出现在多张表中。</strong></p><blockquote><p>满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p></blockquote><p><strong>所以第三范式具有如下特征：</strong></p><ol><li><p>每一列只有一个值</p></li><li><p>每一行都能区分。</p></li><li><p>每一个表都不包含其他表已经包含的非主关键字信息。</p></li></ol><h2 id="3-表连接"><a href="#3-表连接" class="headerlink" title="3. 表连接"></a>3. 表连接</h2><h3 id="3-1-JOIN和UNION的区别"><a href="#3-1-JOIN和UNION的区别" class="headerlink" title="3.1 JOIN和UNION的区别"></a>3.1 JOIN和UNION的区别</h3><ul><li>join 是两张表做交连后里面条件相同的部分记录产生一个记录集，</li><li>union是产生的两个记录集(字段要一样的)并在一起，成为一个新的记录集。 <h3 id="3-2-JOIN联接"><a href="#3-2-JOIN联接" class="headerlink" title="3.2 JOIN联接"></a>3.2 JOIN联接</h3></li></ul><p><strong>JOIN用于按照ON条件联接两个表，主要有四种：</strong></p><ul><li>内联接( inner join)</li></ul><blockquote><p>内部联接两个表中的记录，仅当至少有一个同属于两表的行符合联接条件时，内联接才返回行。我理解的是只要记录不符合ON条件，就不会显示在结果集内。</p></blockquote><p>SQL写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> msp.name, party.name <span class="keyword">FROM</span> msp <span class="keyword">inner</span> <span class="keyword">JOIN</span> party <span class="keyword">ON</span> party=code</span><br><span class="line"><span class="comment">/**或者*/</span></span><br><span class="line"><span class="keyword">SELECT</span> msp.name, party.name <span class="keyword">FROM</span> msp <span class="keyword">JOIN</span> party <span class="keyword">ON</span> party=code</span><br></pre></td></tr></table></figure><ul><li>左联接（LEFT JOIN / LEFT OUTER JOIN）</li></ul><blockquote><p>外部联接两个表中的记录，并包含左表中的全部记录。如果左表的某记录在右表中没有匹配记录，则在相关联的结果集中右表的所有选择列表列均为空值。理解为即使不符合ON条件，左表中的记录也全部显示出来，且结果集中该类记录的右表字段为空值。</p></blockquote><p>SQL写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> msp.name, party.name </span><br><span class="line"><span class="keyword">FROM</span> msp <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> party <span class="keyword">ON</span> party=code</span><br></pre></td></tr></table></figure><ul><li>右联接（RIGHT JOIN / RIGHT OUTER JOIN）</li></ul><blockquote><p>外部联接两个表中的记录，并包含右表中的全部记录。简单说就是和LEFTJOIN反过来。</p></blockquote><p>SQL写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> msp.name, party.name </span><br><span class="line"><span class="keyword">FROM</span> msp <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> party <span class="keyword">ON</span> msp.party=party.code</span><br></pre></td></tr></table></figure><ul><li>全联接（FULL JOIN / FULL OUTER JOIN）</li></ul><blockquote><p>完整外部联接返回左表和右表中的所有行。就是LEFTJOIN和RIGHTJOIN和合并，左右两表的数据都全部显示。</p></blockquote><p>SQL写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> msp.name, party.name</span><br><span class="line"><span class="keyword">FROM</span> msp <span class="keyword">FULL</span> <span class="keyword">JOIN</span> party <span class="keyword">ON</span> msp.party=party.code</span><br></pre></td></tr></table></figure><h3 id="3-3-UNION联接"><a href="#3-3-UNION联接" class="headerlink" title="3.3 UNION联接"></a>3.3 UNION联接</h3><blockquote><p>将两个或更多查询的结果集组合为单个结果集，该结果集包含联合查询中的所有查询的全部行。UNION的结果集列名与UNION运算符中第一个Select语句的结果集的列名相同。另一个Select语句的结果集列名将被忽略。</p></blockquote><p><strong>UNION 与 UNION ALL 的区别：</strong></p><blockquote><p>UNION 在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。实际大部分应用中是不会产生重复的记录. </p></blockquote><ul><li>union 检查重复</li><li>union all 不做检查</li></ul><p>SQL写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**table1和table2的列名一定要相同*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Table1 <span class="keyword">UNION</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Table2</span><br></pre></td></tr></table></figure><h2 id="4-Group-by-的使用"><a href="#4-Group-by-的使用" class="headerlink" title="4.Group by 的使用"></a>4.Group by 的使用</h2><p><strong>语法：select 列a,聚合函数 from 表名 where 过滤条件 group by 列a having 过滤条件</strong></p><h3 id="4-1-概念与使用"><a href="#4-1-概念与使用" class="headerlink" title="4.1 概念与使用"></a>4.1 概念与使用</h3><p><strong>对数据进行分组，所谓的分组就是将一个“数据集”划分成若干个“小区域”，然后针对若干个“小区域”进行数据处理</strong></p><p><strong>注意:group by 是先排序后分组</strong></p><blockquote><p>一般要使用聚集函数时，group by也会使用<br>如果要用到group by 一般用到的就是“每” 这个字，例如：每个部门有多少人， 就要用到分组的技术，语句如下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> DepartmentID,<span class="keyword">COUNT</span>(*) <span class="keyword">from</span> Department <span class="keyword">group</span> <span class="keyword">by</span> DepartmentID</span><br></pre></td></tr></table></figure><h3 id="4-2-聚集函数"><a href="#4-2-聚集函数" class="headerlink" title="4.2 聚集函数"></a>4.2 聚集函数</h3><ul><li>SUM 求和</li><li>MAX 求最大值</li><li>MIN 求最小值</li><li>AVG 求平均值</li></ul><h3 id="4-3-having的使用"><a href="#4-3-having的使用" class="headerlink" title="4.3 having的使用"></a>4.3 having的使用</h3><p><strong>having子句限制的是组，而不是行。where子句中不能使用聚集函数，而having子句中可以。</strong></p><p><strong>需要注意having和where的用法区别：</strong></p><ol><li><p>having只能用在group by之后，对分组后的结果进行筛选(即使用having的前提条件是分组)。</p></li><li><p>where肯定在group by 之前</p></li><li><p>where后的条件表达式里不允许使用聚合函数，而having可以。</p></li></ol><p>举个例子：<br>查询每一个班级中年龄大于20，性别为男的人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> classid,<span class="keyword">COUNT</span>(*) <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> sex=<span class="string">'男'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> classid,age <span class="keyword">having</span> age&gt;<span class="number">20</span></span><br></pre></td></tr></table></figure><p>① 先根据where sex = ‘男’ 拿到所有的男生<br>② 再根据group by classid，age 将所有的男生根据班级id和年龄进行分组<br>③ 再通过having age&gt;20 剔除年龄段小于20 的分组<br>④ 最后通过select count(*)，classid 拿到每个班级的人数</p><h2 id="5-SQL分页技术"><a href="#5-SQL分页技术" class="headerlink" title="5. SQL分页技术"></a>5. SQL分页技术</h2><ul><li><p>mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**pageSize:每页显示多少数据，pageNumber：当前是第几页 */</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> </span><br><span class="line"><span class="keyword">limit</span> pageSize*(pageNumber<span class="number">-1</span>),pageSize</span><br></pre></td></tr></table></figure></li><li><p>sql Server</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"<span class="keyword">select</span> top<span class="string">" + pageSize + "</span> * <span class="keyword">from</span> students </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span><span class="string">" +"</span>(<span class="keyword">select</span> top <span class="string">"+ pageSize * (pageNumber-1) </span></span><br><span class="line"><span class="string">+ "</span> <span class="keyword">id</span> <span class="keyword">from</span> students <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>)<span class="string">" +"</span><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br></pre></td></tr></table></figure></li><li><p>oracle</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql ="<span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">" </span></span><br><span class="line"><span class="string">+(select *,rownum rid from (select * from students order by postime desc) </span></span><br><span class="line"><span class="string">where rid&lt;="</span> + pagesize*pagenumber +<span class="string">") as t"</span> </span><br><span class="line">+<span class="string">"where t&gt;"</span> +pageSize*(pageNumber<span class="number">-1</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-ORM与-JDBC的关系"><a href="#6-ORM与-JDBC的关系" class="headerlink" title="6. ORM与 JDBC的关系"></a>6. ORM与 JDBC的关系</h2><blockquote><p>orm 是一种思想，就是把object 转变成数据库中的记录，或者把数据库中的记录转变成objecdt，我们可以用jdbc 来实现这种思想，<br>用的较多的orm 工具是hibernate、Mybatis、toplink</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1-数据库中一些名词的理解&quot;&gt;&lt;a href=&quot;#1-数据库中一些名词的理解&quot; class=&quot;headerlink&quot; title=&quot;1. 数据库中一些名词的理解&quot;&gt;&lt;/a&gt;1. 数据库中一些名词的理解&lt;/h2&gt;&lt;h3 id=&quot;1-1-事务
      
    
    </summary>
    
    
      <category term="面试" scheme="http://pibigstar.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="数据库总结" scheme="http://pibigstar.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%BB%E7%BB%93/"/>
    
      <category term="表连接" scheme="http://pibigstar.com/tags/%E8%A1%A8%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>使用Java做ORC图片识别</title>
    <link href="http://pibigstar.com/2019/09/04/%E4%BD%BF%E7%94%A8Java%E5%81%9AORC%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/"/>
    <id>http://pibigstar.com/2019/09/04/使用Java做ORC图片识别/</id>
    <published>2019-09-03T17:01:04.000Z</published>
    <updated>2019-09-30T03:12:59.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-下载训练库"><a href="#1-下载训练库" class="headerlink" title="1. 下载训练库"></a>1. 下载训练库</h1><p>下载地址：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tessdata</a></p><p>不用全部下载，中文识别下载那个<code>chi_sim.traineddata</code>即可。</p><h1 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.tess4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tess4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-编写代码"><a href="#3-编写代码" class="headerlink" title="3. 编写代码"></a>3. 编写代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTextByImage</span><span class="params">(String imgPath)</span> <span class="keyword">throws</span> TesseractException </span>&#123;</span><br><span class="line">    File imageFile = <span class="keyword">new</span> File(imgPath);</span><br><span class="line">    <span class="keyword">if</span> (!imageFile.exists())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"图片不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Tesseract tesseract = <span class="keyword">new</span> Tesseract();</span><br><span class="line">    <span class="comment">// 设置训练库的位置,https://github.com/tesseract-ocr/tessdata</span></span><br><span class="line">    tesseract.setDatapath(<span class="string">"D://OCR/tessdata"</span>);</span><br><span class="line">    <span class="comment">// 设置识别语言为中文</span></span><br><span class="line">    tesseract.setLanguage(<span class="string">"chi_sim"</span>);</span><br><span class="line"></span><br><span class="line">    String result = tesseract.doOCR(imageFile);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TesseractException </span>&#123;</span><br><span class="line">   System.out.println(getTextByImage(<span class="string">"D://OCR/img/test.png"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190521205521722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-下载训练库&quot;&gt;&lt;a href=&quot;#1-下载训练库&quot; class=&quot;headerlink&quot; title=&quot;1. 下载训练库&quot;&gt;&lt;/a&gt;1. 下载训练库&lt;/h1&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/tesseract-ocr/t
      
    
    </summary>
    
    
      <category term="java工具类" scheme="http://pibigstar.com/categories/java%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="ocr" scheme="http://pibigstar.com/tags/ocr/"/>
    
      <category term="Java" scheme="http://pibigstar.com/tags/Java/"/>
    
      <category term="tesseract" scheme="http://pibigstar.com/tags/tesseract/"/>
    
  </entry>
  
  <entry>
    <title>Linux随笔记</title>
    <link href="http://pibigstar.com/2019/09/04/Linux%E9%9A%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://pibigstar.com/2019/09/04/Linux随笔记/</id>
    <published>2019-09-03T17:01:04.000Z</published>
    <updated>2019-09-30T03:12:58.920Z</updated>
    
    <content type="html"><![CDATA[<p>@[toc]</p><h1 id="后台执行任务"><a href="#后台执行任务" class="headerlink" title="后台执行任务"></a>后台执行任务</h1><ol><li><p>开启任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup 命令 &gt; temp.log &amp;</span><br></pre></td></tr></table></figure></li><li><p>查看正在运行的任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span> -l</span><br></pre></td></tr></table></figure></li></ol><h1 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h1><p>从 根目录<code>/</code> 开始查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">"my.ini"</span></span><br></pre></td></tr></table></figure><h1 id="Fork炸弹"><a href="#Fork炸弹" class="headerlink" title="Fork炸弹"></a>Fork炸弹</h1><blockquote><p>请不要轻易执行，会耗尽服务器资源，使服务器不能正常的对外提供服务</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:()&#123;:|:&amp;&#125;;:</span><br></pre></td></tr></table></figure><h1 id="根据名称停止所有相关进程"><a href="#根据名称停止所有相关进程" class="headerlink" title="根据名称停止所有相关进程"></a>根据名称停止所有相关进程</h1><blockquote><p>杀死进程中所有进程名中有 <code>kube</code>关键字的进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -9 kube</span><br></pre></td></tr></table></figure><h1 id="漂亮的进程监控"><a href="#漂亮的进程监控" class="headerlink" title="漂亮的进程监控"></a>漂亮的进程监控</h1><ol><li><p>安装htop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y htop</span><br></pre></td></tr></table></figure></li><li><p>查看进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htop</span><br></pre></td></tr></table></figure></li><li><p>效果<br><img src="https://img-blog.csdnimg.cn/20190919221012369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=,size_16,color_FFFFFF,t_70" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[toc]&lt;/p&gt;
&lt;h1 id=&quot;后台执行任务&quot;&gt;&lt;a href=&quot;#后台执行任务&quot; class=&quot;headerlink&quot; title=&quot;后台执行任务&quot;&gt;&lt;/a&gt;后台执行任务&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;开启任务&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://pibigstar.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://pibigstar.com/tags/linux/"/>
    
      <category term="随笔记" scheme="http://pibigstar.com/tags/%E9%9A%8F%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用redis做缓存机制</title>
    <link href="http://pibigstar.com/2019/09/04/SpringBoot%E4%BD%BF%E7%94%A8redis%E5%81%9A%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://pibigstar.com/2019/09/04/SpringBoot使用redis做缓存机制/</id>
    <published>2019-09-03T17:01:04.000Z</published>
    <updated>2019-09-30T03:12:59.144Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot 2.0.3 版本、redis3.2版本</p><h1 id="1-加入jar包"><a href="#1-加入jar包" class="headerlink" title="1. 加入jar包"></a>1. 加入jar包</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-编写RedisConfig类"><a href="#2-编写RedisConfig类" class="headerlink" title="2. 编写RedisConfig类"></a>2. 编写RedisConfig类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pibigstar.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓存管理器</span></span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">RedisCacheManager cacheManager = RedisCacheManager.builder(factory).build();</span><br><span class="line"><span class="keyword">return</span> cacheManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义缓存key生成策略</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator()&#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object target, java.lang.reflect.Method method, Object... params)</span> </span>&#123;</span><br><span class="line">              StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">              sb.append(target.getClass().getName());</span><br><span class="line">              sb.append(method.getName());</span><br><span class="line">              <span class="keyword">for</span>(Object obj:params)&#123;</span><br><span class="line">                  sb.append(obj.toString());</span><br><span class="line">              &#125;</span><br><span class="line">              System.out.println(<span class="string">"调用Redis生成key："</span>+sb.toString());</span><br><span class="line">              <span class="keyword">return</span> sb.toString();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-配置application-yml文件"><a href="#2-1-配置application-yml文件" class="headerlink" title="2.1 配置application.yml文件"></a>2.1 配置application.yml文件</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span> <span class="comment"># 设置数据库索引为0 默认为0</span></span><br><span class="line"><span class="attr">    password:</span> <span class="comment"># 密码为空</span></span><br><span class="line"><span class="attr">    jedis:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">1000</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span> <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">10</span> <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">2</span> <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">2000</span> <span class="comment"># 连接超时时间（毫秒）</span></span><br></pre></td></tr></table></figure><h1 id="3-在-适当的地方加入缓存"><a href="#3-在-适当的地方加入缓存" class="headerlink" title="3. 在 适当的地方加入缓存"></a>3. 在 适当的地方加入缓存</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pibigstar.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.transaction.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pibigstar.dao.GradeMapper;</span><br><span class="line"><span class="keyword">import</span> com.pibigstar.domain.Grade;</span><br><span class="line"><span class="keyword">import</span> com.pibigstar.service.GradeService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames=<span class="string">"grades"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GradeServiceImpl</span> <span class="keyword">implements</span> <span class="title">GradeService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GradeMapper gradeMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable</span> <span class="comment">//开启缓存</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Grade <span class="title">getOneById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gradeMapper.selectByPrimaryKey(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable</span> <span class="comment">//开启缓存</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Grade&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gradeMapper.findAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Cacheable将查询结果缓存到redis中，（key=”#p0”）指定传入的第一个参数作为redis的key。</li><li>@CachePut，指定key，将更新的结果同步到redis中</li><li>@CacheEvict，指定key，删除缓存数据，allEntries=true,方法调用后将立即清除缓存</li></ul><h1 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h1><h2 id="4-1-启动redis"><a href="#4-1-启动redis" class="headerlink" title="4.1 启动redis"></a>4.1 启动redis</h2><p>下载： <a href="https://pan.baidu.com/s/1tTYcCRUF-qDikhPTkSiJTQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1tTYcCRUF-qDikhPTkSiJTQ</a></p><p>解压，双击 start.bat 即可</p><p>RedisDesktopManager 文件夹放的是redis 可视化工具</p><h2 id="4-2-启动项目"><a href="#4-2-启动项目" class="headerlink" title="4.2 启动项目"></a>4.2 启动项目</h2><p>调用 开启缓存的那两个方法，就可以看到控制台输出了：<br><img src="https://img-blog.csdn.net/20180704150026452?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>通过redis 可视化工具可以看到：<br><img src="https://img-blog.csdn.net/20180704144013597?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>已经有key值生成了，</p><p>当再一次查询的时候就不会去从数据库中查询了，而是直接从我们的redis中查询，速度会非常快。</p><p><strong>需要注意的是</strong>：当数据库中值改变了，因为它查询的是从缓存中查询，所以查出来的数据还是之前的数据，只有当key过期之后或者被删除之后才能查到最新的值</p><h1 id="5-常用redis命令"><a href="#5-常用redis命令" class="headerlink" title="5. 常用redis命令"></a>5. 常用redis命令</h1><ul><li>flushdb：清空当前数据库。</li><li>select [index]：选择索引数据库，index为索引值名，如：select 1。</li><li>keys *：查看数据库内所有的key。</li><li>del [key]：删除一条指定key的值。</li><li>get [key] : 获得 指定key的值</li><li>flushall：清空所有数据库。</li><li>quit：退出客户端连接</li></ul><h3 id="关注我的公众号，获取最新Java干货"><a href="#关注我的公众号，获取最新Java干货" class="headerlink" title="关注我的公众号，获取最新Java干货"></a>关注我的公众号，获取最新Java干货</h3><p><img src="https://img-blog.csdn.net/20180828171220662?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p1bm1veGk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="欢迎关注我的公众号"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot 2.0.3 版本、redis3.2版本&lt;/p&gt;
&lt;h1 id=&quot;1-加入jar包&quot;&gt;&lt;a href=&quot;#1-加入jar包&quot; class=&quot;headerlink&quot; title=&quot;1. 加入jar包&quot;&gt;&lt;/a&gt;1. 加入jar包&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="springboot,SpringBoot技能大全" scheme="http://pibigstar.com/categories/springboot-SpringBoot%E6%8A%80%E8%83%BD%E5%A4%A7%E5%85%A8/"/>
    
    
      <category term="springboot" scheme="http://pibigstar.com/tags/springboot/"/>
    
      <category term="redis缓存" scheme="http://pibigstar.com/tags/redis%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>js特效</title>
    <link href="http://pibigstar.com/2019/08/30/js%E7%89%B9%E6%95%88/"/>
    <id>http://pibigstar.com/2019/08/30/js特效/</id>
    <published>2019-08-29T20:04:04.000Z</published>
    <updated>2019-09-30T03:12:58.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="鼠标点击产生红心特效"><a href="#鼠标点击产生红心特效" class="headerlink" title="鼠标点击产生红心特效"></a>鼠标点击产生红心特效</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">! <span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        c(</span><br><span class="line">            <span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span></span><br><span class="line">        ), o(), r()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; d.length; e++) d[e].alpha &lt;= <span class="number">0</span> ? (t.body.removeChild(d[e].el), d.splice(e, <span class="number">1</span>)) : (d[e].y--,</span><br><span class="line">            d[e].scale += <span class="number">.004</span>, d[e].alpha -= <span class="number">.013</span>, d[e].el.style.cssText = <span class="string">"left:"</span> + d[e].x + <span class="string">"px;top:"</span> + d[e].y +</span><br><span class="line">            <span class="string">"px;opacity:"</span> + d[e].alpha + <span class="string">";transform:scale("</span> + d[e].scale + <span class="string">","</span> + d[e].scale +</span><br><span class="line">            <span class="string">") rotate(45deg);background:"</span> + d[e].color + <span class="string">";z-index:99999"</span>);</span><br><span class="line">        requestAnimationFrame(r)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="string">"function"</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick;</span><br><span class="line">        e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            t &amp;&amp; t(), i(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.createElement(<span class="string">"div"</span>);</span><br><span class="line">        a.className = <span class="string">"heart"</span>, d.push(&#123;</span><br><span class="line">            el: a,</span><br><span class="line">            x: e.clientX - <span class="number">5</span>,</span><br><span class="line">            y: e.clientY - <span class="number">5</span>,</span><br><span class="line">            scale: <span class="number">1</span>,</span><br><span class="line">            alpha: <span class="number">1</span>,</span><br><span class="line">            color: s()</span><br><span class="line">        &#125;), t.body.appendChild(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.createElement(<span class="string">"style"</span>);</span><br><span class="line">        a.type = <span class="string">"text/css"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            a.appendChild(t.createTextNode(e))</span><br><span class="line">        &#125; <span class="keyword">catch</span> (t) &#123;</span><br><span class="line">            a.styleSheet.cssText = e</span><br><span class="line">        &#125;</span><br><span class="line">        t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"rgb("</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">")"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> d = [];</span><br><span class="line">    e.requestAnimationFrame = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame ||</span><br><span class="line">            e.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                setTimeout(e, <span class="number">1e3</span> / <span class="number">60</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;(), n()</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;鼠标点击产生红心特效&quot;&gt;&lt;a href=&quot;#鼠标点击产生红心特效&quot; class=&quot;headerlink&quot; title=&quot;鼠标点击产生红心特效&quot;&gt;&lt;/a&gt;鼠标点击产生红心特效&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="前端" scheme="http://pibigstar.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://pibigstar.com/tags/js/"/>
    
      <category term="特效" scheme="http://pibigstar.com/tags/%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>常用Shell方法集合</title>
    <link href="http://pibigstar.com/2019/08/29/%E5%B8%B8%E7%94%A8Shell%E6%96%B9%E6%B3%95%E9%9B%86%E5%90%88/"/>
    <id>http://pibigstar.com/2019/08/29/常用Shell方法集合/</id>
    <published>2019-08-28T21:05:04.000Z</published>
    <updated>2019-09-30T03:12:59.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断是否是root用户"><a href="#判断是否是root用户" class="headerlink" title="判断是否是root用户"></a>判断是否是root用户</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">check_root</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> user=<span class="string">""</span></span><br><span class="line">user=<span class="string">"<span class="variable">$(id -un 2&gt;/dev/null || true)</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$user</span>"</span> != <span class="string">"root"</span> ]; <span class="keyword">then</span></span><br><span class="line">cat &gt;&amp;2 &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">权限错误, 请使用 root 用户运行此脚本!</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断命令是否存在"><a href="#判断命令是否存在" class="headerlink" title="判断命令是否存在"></a>判断命令是否存在</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">command_exists</span></span>() &#123;</span><br><span class="line"><span class="built_in">command</span> -v <span class="string">"<span class="variable">$@</span>"</span> &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> command_exists ip;<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"存在ip命令"</span></span><br><span class="line"><span class="keyword">elif</span> command_exists ifconfig; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"存在ifconfig命令"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"都不存在"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="判断参数是否为数字"><a href="#判断参数是否为数字" class="headerlink" title="判断参数是否为数字"></a>判断参数是否为数字</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">is_number</span></span>() &#123;</span><br><span class="line">expr <span class="string">"<span class="variable">$1</span>"</span> + 1 &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ! ( is_number <span class="string">"<span class="variable">$1</span>"</span> ); <span class="keyword">then</span></span><br><span class="line">cat &gt;&amp;2 &lt;&lt;-EOF</span><br><span class="line">请输入数字</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="获取服务器IP地址"><a href="#获取服务器IP地址" class="headerlink" title="获取服务器IP地址"></a>获取服务器IP地址</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get_server_ip</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> server_ip=<span class="string">""</span></span><br><span class="line"><span class="built_in">local</span> interface_info=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> command_exists ip; <span class="keyword">then</span></span><br><span class="line">interface_info=<span class="string">"<span class="variable">$(ip addr)</span>"</span></span><br><span class="line"><span class="keyword">elif</span> command_exists ifconfig; <span class="keyword">then</span></span><br><span class="line">interface_info=<span class="string">"<span class="variable">$(ifconfig)</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">server_ip=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$interface_info</span>"</span> | \</span><br><span class="line">grep -oE <span class="string">"[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;"</span> | \</span><br><span class="line">grep -vE <span class="string">"^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\."</span> | \</span><br><span class="line">head -n 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动获取失败时，通过网站提供的 API 获取外网地址</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$server_ip</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"> server_ip=<span class="string">"<span class="variable">$(wget -qO- --no-check-certificate https://ipv4.icanhazip.com)</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$server_ip</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="下载文件，重试3次"><a href="#下载文件，重试3次" class="headerlink" title="下载文件，重试3次"></a>下载文件，重试3次</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">download_file</span></span>() &#123;</span><br><span class="line"><span class="comment"># 文件下载链接</span></span><br><span class="line"><span class="built_in">local</span> url=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="comment"># 文件下载后存放路径</span></span><br><span class="line"><span class="built_in">local</span> file=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"><span class="built_in">local</span> retry=0</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">download_file_to_path</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$retry</span> -ge 3 ]; <span class="keyword">then</span></span><br><span class="line">rm -f <span class="string">"<span class="variable">$file</span>"</span></span><br><span class="line">cat &gt;&amp;2 &lt;&lt;-EOF</span><br><span class="line">文件下载失败! 请重试。</span><br><span class="line">URL: <span class="variable">$&#123;url&#125;</span></span><br><span class="line">EOF</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">( <span class="built_in">set</span> -x; wget -O <span class="string">"<span class="variable">$file</span>"</span> --no-check-certificate <span class="string">"<span class="variable">$url</span>"</span> )</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"$?"</span> != <span class="string">"0"</span> ] || [ -n <span class="string">"<span class="variable">$verify_cmd</span>"</span> ] &amp;&amp; ! verify_file; <span class="keyword">then</span></span><br><span class="line">retry=$(expr <span class="variable">$retry</span> + 1)</span><br><span class="line">download_file_to_path</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">download_file_to_path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">DOCKERFILE_DOWNLOAD_URL=<span class="string">"https://github.com/pibigstar/go-todo/blob/master/Dockerfile"</span></span><br><span class="line">download_file <span class="string">"<span class="variable">$DOCKERFILE_DOWNLOAD_URL</span>"</span> <span class="string">"/usr/local/todo"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;判断是否是root用户&quot;&gt;&lt;a href=&quot;#判断是否是root用户&quot; class=&quot;headerlink&quot; title=&quot;判断是否是root用户&quot;&gt;&lt;/a&gt;判断是否是root用户&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
    
      <category term="shell" scheme="http://pibigstar.com/categories/shell/"/>
    
    
      <category term="shell" scheme="http://pibigstar.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux防火墙操作</title>
    <link href="http://pibigstar.com/2019/08/29/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E6%93%8D%E4%BD%9C/"/>
    <id>http://pibigstar.com/2019/08/29/Linux防火墙操作/</id>
    <published>2019-08-28T21:05:04.000Z</published>
    <updated>2019-09-30T03:12:58.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-查看防火墙状态"><a href="#1-查看防火墙状态" class="headerlink" title="1. 查看防火墙状态"></a>1. 查看防火墙状态</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --state</span><br></pre></td></tr></table></figure><blockquote><p>如果是运行中则会输出 running，如果没有运行则会输出 not running</p></blockquote><h1 id="2-关闭防火墙"><a href="#2-关闭防火墙" class="headerlink" title="2. 关闭防火墙"></a>2. 关闭防火墙</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 关闭开机自启</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h1 id="3-开启防火墙"><a href="#3-开启防火墙" class="headerlink" title="3. 开启防火墙"></a>3. 开启防火墙</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><h1 id="4-添加端口白名单"><a href="#4-添加端口白名单" class="headerlink" title="4. 添加端口白名单"></a>4. 添加端口白名单</h1><blockquote><p>将 5901-5905端口添加到白名单中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-port=5901-5905/tcp</span><br></pre></td></tr></table></figure><h1 id="5-重新加载"><a href="#5-重新加载" class="headerlink" title="5. 重新加载"></a>5. 重新加载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="6-查看白名单端口列表"><a href="#6-查看白名单端口列表" class="headerlink" title="6. 查看白名单端口列表"></a>6. 查看白名单端口列表</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --list-all-zones</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-查看防火墙状态&quot;&gt;&lt;a href=&quot;#1-查看防火墙状态&quot; class=&quot;headerlink&quot; title=&quot;1. 查看防火墙状态&quot;&gt;&lt;/a&gt;1. 查看防火墙状态&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://pibigstar.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://pibigstar.com/tags/linux/"/>
    
      <category term="firewall" scheme="http://pibigstar.com/tags/firewall/"/>
    
  </entry>
  
</feed>
